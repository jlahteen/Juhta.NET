### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Common.RegularExpressions
  commentId: T:Juhta.Net.Common.RegularExpressions
  id: RegularExpressions
  parent: Juhta.Net.Common
  children:
  - Juhta.Net.Common.RegularExpressions.AssemblyClassFileUri
  - Juhta.Net.Common.RegularExpressions.DirectoryPath
  - Juhta.Net.Common.RegularExpressions.EmailAddress
  - Juhta.Net.Common.RegularExpressions.EmailAddressList
  - Juhta.Net.Common.RegularExpressions.FilePath
  langs:
  - csharp
  - vb
  name: RegularExpressions
  nameWithType: RegularExpressions
  fullName: Juhta.Net.Common.RegularExpressions
  type: Class
  source:
    remote:
      path: Source/Juhta.Net/Common/RegularExpressions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: RegularExpressions
    path: ../../Juhta.NET/Source/Juhta.Net/Common/RegularExpressions.cs
    startLine: 13
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nDefines a static class containing certain regular expression patterns for validating string data.\n"
  example: []
  syntax:
    content: public static class RegularExpressions
    content.vb: Public Module RegularExpressions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Juhta.Net.Common.RegularExpressions.AssemblyClassFileUri
  commentId: F:Juhta.Net.Common.RegularExpressions.AssemblyClassFileUri
  id: AssemblyClassFileUri
  parent: Juhta.Net.Common.RegularExpressions
  langs:
  - csharp
  - vb
  name: AssemblyClassFileUri
  nameWithType: RegularExpressions.AssemblyClassFileUri
  fullName: Juhta.Net.Common.RegularExpressions.AssemblyClassFileUri
  type: Field
  source:
    remote:
      path: Source/Juhta.Net/Common/RegularExpressions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: AssemblyClassFileUri
    path: ../../Juhta.NET/Source/Juhta.Net/Common/RegularExpressions.cs
    startLine: 20
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression for validating assembly class file URIs.\n"
  example: []
  syntax:
    content: public const string AssemblyClassFileUri = "^((file://)?(([a-zA-Z]:\\\\)|(\\\\\\\\(([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})|(([a-zA-Z][a-zA-Z0-9_]*\\.)*[a-zA-Z][a-zA-Z0-9_]*))\\\\[^\\\\/:\\*\\?\\|<>]+\\\\)))?([^\\\\/:\\*\\?\\|<>]+\\\\)*([^\\\\/:\\*\\?\\|<>]+)\\.dll#[a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]+)+$"
    return:
      type: System.String
    content.vb: Public Const AssemblyClassFileUri As String = "^((file://)?(([a-zA-Z]:\\)|(\\\\(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([a-zA-Z][a-zA-Z0-9_]*\.)*[a-zA-Z][a-zA-Z0-9_]*))\\[^\\/:\*\?\|<>]+\\)))?([^\\/:\*\?\|<>]+\\)*([^\\/:\*\?\|<>]+)\.dll#[a-zA-Z0-9_]*(\.[a-zA-Z0-9_]+)+$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Juhta.Net.Common.RegularExpressions.DirectoryPath
  commentId: F:Juhta.Net.Common.RegularExpressions.DirectoryPath
  id: DirectoryPath
  parent: Juhta.Net.Common.RegularExpressions
  langs:
  - csharp
  - vb
  name: DirectoryPath
  nameWithType: RegularExpressions.DirectoryPath
  fullName: Juhta.Net.Common.RegularExpressions.DirectoryPath
  type: Field
  source:
    remote:
      path: Source/Juhta.Net/Common/RegularExpressions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: DirectoryPath
    path: ../../Juhta.NET/Source/Juhta.Net/Common/RegularExpressions.cs
    startLine: 25
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression for validating absolute or relative directory paths.\n"
  example: []
  syntax:
    content: public const string DirectoryPath = "^(?!^ *$)(([a-zA-Z]:\\\\)|(\\\\\\\\(([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})|(([a-zA-Z][a-zA-Z0-9_]*\\.)*[a-zA-Z][a-zA-Z0-9_]*))\\\\[^\\\\/:\\*\\?\\|<>]+\\\\))?([^\\\\/:\\*\\?\\|<>]+\\\\)*([^\\\\/:\\*\\?\\|<>]+(\\\\)?)?$"
    return:
      type: System.String
    content.vb: Public Const DirectoryPath As String = "^(?!^ *$)(([a-zA-Z]:\\)|(\\\\(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([a-zA-Z][a-zA-Z0-9_]*\.)*[a-zA-Z][a-zA-Z0-9_]*))\\[^\\/:\*\?\|<>]+\\))?([^\\/:\*\?\|<>]+\\)*([^\\/:\*\?\|<>]+(\\)?)?$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Juhta.Net.Common.RegularExpressions.EmailAddress
  commentId: F:Juhta.Net.Common.RegularExpressions.EmailAddress
  id: EmailAddress
  parent: Juhta.Net.Common.RegularExpressions
  langs:
  - csharp
  - vb
  name: EmailAddress
  nameWithType: RegularExpressions.EmailAddress
  fullName: Juhta.Net.Common.RegularExpressions.EmailAddress
  type: Field
  source:
    remote:
      path: Source/Juhta.Net/Common/RegularExpressions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: EmailAddress
    path: ../../Juhta.NET/Source/Juhta.Net/Common/RegularExpressions.cs
    startLine: 30
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression for validating email addresses.\n"
  example: []
  syntax:
    content: public const string EmailAddress = "^[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*\\.[a-zA-Z]{2,4}$"
    return:
      type: System.String
    content.vb: Public Const EmailAddress As String = "^[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*\.[a-zA-Z]{2,4}$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Juhta.Net.Common.RegularExpressions.EmailAddressList
  commentId: F:Juhta.Net.Common.RegularExpressions.EmailAddressList
  id: EmailAddressList
  parent: Juhta.Net.Common.RegularExpressions
  langs:
  - csharp
  - vb
  name: EmailAddressList
  nameWithType: RegularExpressions.EmailAddressList
  fullName: Juhta.Net.Common.RegularExpressions.EmailAddressList
  type: Field
  source:
    remote:
      path: Source/Juhta.Net/Common/RegularExpressions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: EmailAddressList
    path: ../../Juhta.NET/Source/Juhta.Net/Common/RegularExpressions.cs
    startLine: 35
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression for validating email address lists.\n"
  example: []
  syntax:
    content: public const string EmailAddressList = "^[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*\\.[a-zA-Z]{2,4}(; ?[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*\\.[a-zA-Z]{2,4})*;?$"
    return:
      type: System.String
    content.vb: Public Const EmailAddressList As String = "^[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*\.[a-zA-Z]{2,4}(; ?[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*\.[a-zA-Z]{2,4})*;?$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Juhta.Net.Common.RegularExpressions.FilePath
  commentId: F:Juhta.Net.Common.RegularExpressions.FilePath
  id: FilePath
  parent: Juhta.Net.Common.RegularExpressions
  langs:
  - csharp
  - vb
  name: FilePath
  nameWithType: RegularExpressions.FilePath
  fullName: Juhta.Net.Common.RegularExpressions.FilePath
  type: Field
  source:
    remote:
      path: Source/Juhta.Net/Common/RegularExpressions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: FilePath
    path: ../../Juhta.NET/Source/Juhta.Net/Common/RegularExpressions.cs
    startLine: 40
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression for validating absolute or relative file paths.\n"
  example: []
  syntax:
    content: public const string FilePath = "^(([a-zA-Z]:\\\\)|(\\\\\\\\(([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})|(([a-zA-Z][a-zA-Z0-9_]*\\.)*[a-zA-Z][a-zA-Z0-9_]*))\\\\[^\\\\/:\\*\\?\\|<>]+\\\\))?([^\\\\/:\\*\\?\\|<>]+\\\\)*([^\\\\/:\\*\\?\\|<>]+)$"
    return:
      type: System.String
    content.vb: Public Const FilePath As String = "^(([a-zA-Z]:\\)|(\\\\(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([a-zA-Z][a-zA-Z0-9_]*\.)*[a-zA-Z][a-zA-Z0-9_]*))\\[^\\/:\*\?\|<>]+\\))?([^\\/:\*\?\|<>]+\\)*([^\\/:\*\?\|<>]+)$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Juhta.Net.Common
  commentId: N:Juhta.Net.Common
  isExternal: false
  name: Juhta.Net.Common
  nameWithType: Juhta.Net.Common
  fullName: Juhta.Net.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
