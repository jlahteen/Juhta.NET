<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Juhta.Net</name>
    </assembly>
    <members>
        <member name="T:Juhta.Net.Application">
            <summary>
            A class that represents an application built on the top of the framework. The class provides basic information
            about the application and methods for initializing and closing the application.
            </summary>
        </member>
        <member name="M:Juhta.Net.Application.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>Log events will be written to the current user's temp directory, and the configuration files are
            assumed to locate in the binary directory.</remarks>
        </member>
        <member name="M:Juhta.Net.Application.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logFilePath">Specifies a log file path. Can be null in which case the log file will be written
            to the current user's temp directory. This default location will also be used if <paramref name="logFilePath"/>
            specifies an invalid log file.</param>
            <remarks>The configuration files are assumed to locate in the binary directory.</remarks>
        </member>
        <member name="M:Juhta.Net.Application.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logFilePath">Specifies a log file path. Can be null in which case the log file will be written
            to the current user's temp directory. This default location will also be used if <paramref name="logFilePath"/>
            specifies an invalid log file.</param>
            <param name="configDirectory">Specifies a directory to search for configuration files. Can be null in which
            case the configuration files are assumed to locate in the binary directory.</param>
        </member>
        <member name="M:Juhta.Net.Application.Close">
            <summary>
            Closes the application by closing all configured startup libraries and the core of the framework.
            </summary>
        </member>
        <member name="M:Juhta.Net.Application.CloseInstance">
            <summary>
            Closes the possibly created singleton <see cref="T:Juhta.Net.Application"/> instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Application.CreateDynamicLibraryContext``2">
            <summary>
            Creates an instance of <see cref="T:Juhta.Net.LibraryManagement.DynamicLibraryContext`2"/> corresponding to
            specified dynamic library type and library state type.
            </summary>
            <typeparam name="TDynamicLibrary">Specifies a dynamic library type.</typeparam>
            <typeparam name="TLibraryState">Specifies a library state type.</typeparam>
            <returns>Returns the created <see cref="T:Juhta.Net.LibraryManagement.DynamicLibraryContext`2"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Application.Start">
            <summary>
            Starts the application by initializing the core of the framework and all configured startup libraries.
            </summary>
        </member>
        <member name="M:Juhta.Net.Application.StartInstance">
            <summary>
            Creates and starts a new singleton <see cref="T:Juhta.Net.Application"/> instance.
            </summary>
            <remarks>Log events will be written to the current user's temp directory, and the configuration files are
            assumed to locate in the binary directory.</remarks>
        </member>
        <member name="M:Juhta.Net.Application.StartInstance(System.String)">
            <summary>
            Creates and starts a new singleton <see cref="T:Juhta.Net.Application"/> instance.
            </summary>
            <param name="logFilePath">Specifies a log file path. Can be null in which case the log file will be written
            to the current user's temp directory. This default location will also be used if <paramref name="logFilePath"/>
            specifies an invalid log file.</param>
            <remarks>The configuration files are assumed to locate in the binary directory.</remarks>
        </member>
        <member name="M:Juhta.Net.Application.StartInstance(System.String,System.String)">
            <summary>
            Creates and starts a new singleton <see cref="T:Juhta.Net.Application"/> instance.
            </summary>
            <param name="logFilePath">Specifies a log file path. Can be null in which case the log file will be written
            to the current user's temp directory. This default location will also be used if <paramref name="logFilePath"/>
            specifies an invalid log file.</param>
            <param name="configDirectory">Specifies a directory to search for configuration files. Can be null in which
            case the configuration files are assumed to locate in the binary directory.</param>
        </member>
        <member name="P:Juhta.Net.Application.BinDirectory">
            <summary>
            Gets the binary directory for the framework and application libraries. The return value is null if the
            application is not initialized.
            </summary>
        </member>
        <member name="P:Juhta.Net.Application.ConfigDirectory">
            <summary>
            Gets the configuration directory for the framework and application libraries. The return value is null if
            the application is not initialized.
            </summary>
        </member>
        <member name="P:Juhta.Net.Application.IsInitialized">
            <summary>
            Returns true if the application has been initialized, otherwise false.
            </summary>
        </member>
        <member name="P:Juhta.Net.Application.Name">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="M:Juhta.Net.Application.InitializeName(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Initializes the name of the application based on a specified configuration.
            </summary>
            <param name="rootConfig">Specifies an <see cref="T:System.Xml.XmlDocument"/> object containing the root configuration.</param>
            <param name="namespaceManager">Specifies an <see cref="T:System.Xml.XmlNamespaceManager"/> object for selecting nodes in
            <paramref name="rootConfig"/>.</param>
        </member>
        <member name="M:Juhta.Net.Application.LoadAndValidateRootConfig">
            <summary>
            Loads and validates the root configuration file.
            </summary>
            <returns>Returns an <see cref="T:System.Xml.XmlDocument"/> object containing the root configuration. If there is no root
            configuration file, the return value is null.</returns>
        </member>
        <member name="T:Juhta.Net.Application.State">
            <summary>
            Defines an enumeration for the states of the application.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.State.Uninitialized">
            <summary>
            The application is uninitialized.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.State.PartlyInitialized">
            <summary>
            The application is only partly initialized, that is, the initialization has not been completed due to
            an error.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.State.Initialized">
            <summary>
            The application has been successfully initialized.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.m_binDirectory">
            <summary>
            Stores the <see cref="P:Juhta.Net.Application.BinDirectory"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.m_configDirectory">
            <summary>
            Stores the <see cref="P:Juhta.Net.Application.ConfigDirectory"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.m_libraryManager">
            <summary>
            Specifies the <see cref="T:Juhta.Net.LibraryManagement.LibraryManager"/> instance that was created when the application was initialized.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.m_name">
            <summary>
            Stores the <see cref="P:Juhta.Net.Application.Name"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Application.m_state">
            <summary>
            Specifies the current state of the application.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.AlertMessage">
            <summary>
            Defines a class for alert messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.AlertMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Common.AlertMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Common.AssemblyClassFileUri">
            <summary>
            Defines a class that can be used for locating assembly classes with file URIs.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.AssemblyClassFileUri.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="fileUri">Specifies a file URI whose fragment part determines a class name in a referenced
            assembly file.</param>
            <remarks>This constructor also accepts an incomplete file URI consisting only of a file name or a relative
            file path and the fragment part. For example, MyAssembly.dll#MyNamespace.MyClass is a valid file URI for
            this constructor. Furthermore, the fragment part can start with a dot '.' character in which case the root
            namespace will be taken from the assembly file name.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.AssemblyClassFileUri.CompleteAndCheckFileUri(System.String)">
            <summary>
            Completes and checks a specified file URI value.
            </summary>
            <param name="fileUri">Specifies a file URI value.</param>
            <returns>Returns the specified file URI value as a completed URI value.</returns>
        </member>
        <member name="T:Juhta.Net.Common.AssemblyClassUri">
            <summary>
            Defines an abstract base class for classes that can be used for locating assembly classes with URIs. An
            assembly class URI is a standard URI whose fragment part specifies a class name in a referenced assembly file.
            For instance, file://C:\MyAssemblies\MyAssembly.dll#MyNamespace.MyClass is a valid assembly class URI.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.AssemblyClassUri.FullClassName">
            <summary>
            Gets the full name of the assembly class referenced by this AssemblyClassUri instance.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.AssemblyClassUri.IsAssemblyDownloaded">
            <summary>
            Returns true if the assembly referenced by this AssemblyClassUri instance has been downloaded to the local
            machine or is available without a download on the local machine.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.AssemblyClassUri.LocalAssemblyPath">
            <summary>
            Gets the local path of the assembly referenced by this AssemblyClassUri instance.
            </summary>
            <remarks>An exception will be thrown if the assembly has not been downloaded to the local machine.</remarks>
            <seealso cref="P:Juhta.Net.Common.AssemblyClassUri.IsAssemblyDownloaded"/>
        </member>
        <member name="M:Juhta.Net.Common.AssemblyClassUri.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="uri">Specifies a URI whose fragment part determines a class name in a referenced assembly
            file.</param>
            <remarks>The fragment part can start with a dot '.' character in which case the root namespace will be
            taken from the assembly file name.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.AssemblyClassUri.IsFixedDiskDrivePath(System.String)">
            <summary>
            Checks whether a specified file path refers to a file on a fixed disk drive.
            </summary>
            <param name="filePath">Specified a file path.</param>
            <returns>Returns true if the specified file path refers to a file on a fixed disk drive, otherwise false.</returns>
        </member>
        <member name="F:Juhta.Net.Common.AssemblyClassUri.m_localAssemblyPath">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.AssemblyClassUri.LocalAssemblyPath"/> property.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.AssemblyClassUri.SetLocalAssemblyPath(System.String)">
            <summary>
            Associates a local assembly with this AssemblyClassUri instance.
            </summary>
            <param name="localAssemblyPath">Specifies an absolute path that must refer to an assembly on a fixed disk
            drive.</param>
        </member>
        <member name="F:Juhta.Net.Common.AssemblyClassUri.m_fullClassName">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.AssemblyClassUri.FullClassName"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.AssemblyNotLoadedException">
            <summary>
            This exception will be thrown when a desired assembly was not found among the loaded assemblies of an
            application domain.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.AssemblyNotLoadedException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="T:Juhta.Net.Common.CommandLineArg">
            <summary>
            Defines an abstract base class for command line arguments.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArg.ValidateValue(Juhta.Net.Validation.IStringValidator)">
            <summary>
            Validates the value of this CommandLineArg object through a specified IStringValidator instance.
            </summary>
            <param name="validator">Specifies an IStringValidator instance.</param>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArg.ValidateValue(System.String)">
            <summary>
            Validates the value of this CommandLineArg object with a specified regular expression.
            </summary>
            <param name="regex">Specifies a regular expression.</param>
        </member>
        <member name="P:Juhta.Net.Common.CommandLineArg.RawArg">
            <summary>
            Gets the raw command line argument specified by this CommandLineArg object.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.CommandLineArg.Value">
            <summary>
            Gets the (possibly parsed) value of the command line argument specified by this CommandLineArg object.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArg.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="rawArg">Specifies a value for the <see cref="P:Juhta.Net.Common.CommandLineArg.RawArg"/> property.</param>
            <param name="value">Specifies a value for the <see cref="P:Juhta.Net.Common.CommandLineArg.Value"/> property.</param>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArg.m_rawArg">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.CommandLineArg.RawArg"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArg.m_value">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.CommandLineArg.Value"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.CommandLineArgException">
            <summary>
            This exception will be thrown when an invalid argument is encountered in command line parsing.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an inner exception.</param>
        </member>
        <member name="T:Juhta.Net.Common.CommandLineArgsParser">
            <summary>
            Defines a class for parsing command line arguments.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.#ctor(System.String[],System.Nullable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="args">Specifies an array of command line arguments. Can be null.</param>
            <param name="optionPrefix">Specifies a prefix for command line options. Can be null in which case all
            arguments are expected to be parameters.</param>
            <param name="optionNameValueSeparator">Specifies a separator for name and value parts in command line
            options. Can be null in which case options are not expected to contain any value parts.</param>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.GetExclusiveOption(System.String[])">
            <summary>
            Gets and removes a mutually exclusive option from the command line arguments.
            </summary>
            <param name="optionNames">Specifies an array of option names that are treated as mutually exclusive.</param>
            <returns>Returns the option from the specified mutually exclusive options that is found among the command
            line arguments. If no option or more than one options are found, an exception will be thrown.</returns>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.GetExclusiveOption(System.String[],System.String)">
            <summary>
            Gets and removes a mutually exclusive option from the command line arguments.
            </summary>
            <param name="optionNames">Specifies an array of option names that are treated as mutually exclusive.</param>
            <param name="defaultOption">Specifies a default option. Can be null.</param>
            <returns>Returns the option from the specified mutually exclusive options that is found among the command
            line arguments. If more than one options are found, an exception will be thrown; in case of no option is
            found, returns the default option if such is given, or throws an exception.</returns>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.GetNextParam">
            <summary>
            Gets and removes the next parameter from the command line arguments.
            </summary>
            <returns>Returns the next parameter from the command line arguments. If there are no parameters to be
            consumed, an exception will be thrown.</returns>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.GetOption(System.String)">
            <summary>
            Gets and removes an option from the command line arguments.
            </summary>
            <param name="optionName">Specifies an option name.</param>
            <returns>Returns the specified option from the command line arguments. If the option is specified more than
            once, an exception will be thrown as well as when the option is not found.</returns>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.GetOption(System.String,System.String)">
            <summary>
            Gets and removes an option from the command line arguments.
            </summary>
            <param name="optionName">Specifies an option name.</param>
            <param name="defaultOption">Specifies a default option. Can be null.</param>
            <returns>Returns the specified option from the command line arguments. If the option is specified more than
            once, an exception will be thrown as well as when the option is not found and no default option is given.</returns>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.TryGetOption(System.String,Juhta.Net.Common.CommandLineOption@)">
            <summary>
            Tries to get and remove an option from the command line arguments.
            </summary>
            <param name="optionName">Specifies an option name.</param>
            <param name="option">If the function returns true, this parameter returns the specified option from the
            command line arguments, otherwise the return value is null.</param>
            <returns>The function returns true if the specified option was found in the command line arguments,
            otherwise the return value is false.</returns>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.VerifyArgsConsumed">
            <summary>
            Verifies that all command line arguments have been consumed. If not, an exception will be thrown.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.CommandLineArgsParser.CurrentArgCount">
            <summary>
            Gets the number of command line arguments left to be consumed.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.CommandLineArgsParser.OriginalArgCount">
            <summary>
            Gets the original number of the command line arguments.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.CreateCommandLineOption(System.String)">
            <summary>
            Creates a CommandLineOption object based on a command line option string.
            </summary>
            <param name="option">Specifies a command line option string.</param>
            <returns>Returns the CommandLineOption object created based on the specified command line option string.</returns>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineArgsParser.GetOption(System.String,System.String,System.Boolean)">
            <summary>
            Gets and removes an option from the command line arguments.
            </summary>
            <param name="optionName">Specifies an option name.</param>
            <param name="defaultOption">Specifies a default option. Can be null.</param>
            <param name="throwExceptionIfNotFound">Specifies whether an exception will be thrown if the option is not
            found and no default option is given.</param>
            <returns>Returns the specified option from the command line arguments. If the option is specified more than
            once, an exception will be thrown. If the option is not found and no default option is given, the function
            either throws an exception or returns null depending on the boolean value of
            <paramref name="throwExceptionIfNotFound"/>.</returns>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArgsParser.c_optionNamePattern">
            <summary>
            Specifies the regex pattern for validating option names.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArgsParser.c_optionNameValueSeparatorPattern">
            <summary>
            Specifies the regex pattern for validating name and value part separators in command line options.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArgsParser.c_optionPrefixPattern">
            <summary>
            Specifies the regex pattern for validating option prefixes.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArgsParser.m_commandLineArgs">
            <summary>
            Specifies a linked list of the command line arguments.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArgsParser.m_optionNameValueSeparator">
            <summary>
            Specifies the separator for name and value parts in command line options.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArgsParser.m_optionPrefix">
            <summary>
            Specifies the prefix for command line options.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineArgsParser.m_originalArgCount">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.CommandLineArgsParser.OriginalArgCount"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.CommandLineOption">
            <summary>
            Defines a class that represents a command line option. At the command line level, command line options consist
            of a prefix, name and an optional value, which is separated by a name-value separator from the name part.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.CommandLineOption.Name">
            <summary>
            Gets the name of the command line option specified by this CommandLineOption object.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineOption.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="rawArg">Species a value for the <see cref="P:Juhta.Net.Common.CommandLineArg.RawArg"/> property.</param>
            <param name="name">Species a value for the <see cref="P:Juhta.Net.Common.CommandLineOption.Name"/> property.</param>
            <param name="value">Species a value for the <see cref="P:Juhta.Net.Common.CommandLineArg.Value"/> property.</param>
        </member>
        <member name="F:Juhta.Net.Common.CommandLineOption.m_name">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.CommandLineOption.Name"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.CommandLineParam">
            <summary>
            Defines a class that represents a command line parameter. The values of the properties
            <see cref="P:Juhta.Net.Common.CommandLineArg.Value"/> and <see cref="P:Juhta.Net.Common.CommandLineArg.RawArg"/> are always the same with command
            line parameters.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.CommandLineParam.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="value">Specifies a value for the <see cref="P:Juhta.Net.Common.CommandLineArg.Value"/> property as well as to the
            <see cref="P:Juhta.Net.Common.CommandLineArg.RawArg"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Common.CommonMessages">
            <summary>
            A static class that defines the common diagnostic messages.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.MessageFactory">
            <summary>
            Gets the DiagnosticMessageFactory instance for creating diagnostic messages.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error001">
            <summary>
            Value of the parameter '{0}' cannot be null.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error002">
            <summary>
            Value of the parameter '{0}' cannot be an empty string or a string containing nothing but white space
            characters.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error003">
            <summary>
            File '{0}' could not be locked within a {1} millisecond timeout.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error004">
            <summary>
            Portion of the file '{0}' could not be locked within a {1} millisecond timeout.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error005">
            <summary>
            Value of the parameter '{0}' is not valid.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error006">
            <summary>
            Method '{0}' of the class '{1}' cannot be executed because the current state of the appropriate instance
            doesn't allow it.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error007">
            <summary>
            File '{0}' does not exist.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error008">
            <summary>
            Directory '{0}' does not exist.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error009">
            <summary>
            Method '{0}' is not supported by the type '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error010">
            <summary>
            Property '{0}' is not supported by the type '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error011">
            <summary>
            An error occurred in the closing process of the library '{0}': {1}
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error012">
            <summary>
            Static method '{0}' of the class '{1}' cannot be executed because the current state of the class doesn't
            allow it.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error013">
            <summary>
            The lenghts of the arrays '{0}' and '{1}' do not match.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error014">
            <summary>
            Only one instance of the singleton class '{0}' is allowed to be created.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error015">
            <summary>
            Property '{0}' of an instance of the class '{1}' cannot be executed because the instance has been disposed.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error016">
            <summary>
            Method '{0}' of an instance of the class '{1}' cannot be executed because the instance has been disposed.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error017">
            <summary>
            An instance of the class '{0}' could not be created because the type was not found in the assembly '{1}'.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.ConfigException">
            <summary>
            This exception will be thrown in a situation where execution cannot be continued for a reason that somehow
            depends on the currently effective configuration. This exception should not be thrown unless the error is
            avoidable by changing the configuration.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ConfigException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="T:Juhta.Net.Common.ConsumerThread`1">
            <summary>
            Defines an abstract base class for consumer threads. The class provides a thread-safe method for putting
            objects into consumption. Incoming objects will be consumed asynchronously with a single worker thread.
            </summary>
            <typeparam name="T">Specifies the type of objects to consume.</typeparam>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.Consume(`0)">
            <summary>
            Consumes a specified object asynchronously.
            </summary>
            <param name="object">Specifies an object to consume.</param>
            <remarks>
            <para>This method returns immediately after the specified object has been put into an internal queue to
            wait for asynchronous consumption.</para>
            <para>Multiple threads can access this method concurrently.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.Start">
            <summary>
            Starts this ConsumerThread instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.Stop">
            <summary>
            Stops this ConsumerThread instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.ConsumeObject(`0)">
            <summary>
            Consumes a specified object.
            </summary>
            <param name="object">Specifies an object to consume.</param>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.OnConsumeObjectFailed(`0,System.Exception)">
            <summary>
            Performs necessary actions when an error occurs at the time an object is consumed.
            </summary>
            <param name="object">Specifies an object whose consumption was failed.</param>
            <param name="exception">Specifies the occurred exception.</param>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.OnWorkerThreadFailed(System.Exception)">
            <summary>
            Performs necessary actions when the worker thread is about to exit due to an (unexpected) exception.
            </summary>
            <param name="exception">Specifies an exception that forces the worker thread to exit.</param>
        </member>
        <member name="M:Juhta.Net.Common.ConsumerThread`1.WorkerThreadMain">
            <summary>
            Consumes objects until the queue of incoming objects is closed.
            </summary>
            <remarks>This method defines the &quot;main&quot; program for the worker thread.</remarks>
        </member>
        <member name="F:Juhta.Net.Common.ConsumerThread`1.m_objectQueue">
            <summary>
            Specifies the queue where incoming objects are put to wait for consumption.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ConsumerThread`1.m_workerThread">
            <summary>
            Specifies the worker thread that actually consumes incoming objects.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.DiagnosticMessage">
            <summary>
            Defines an abstract base class for diagnostic messages. Diagnostic messages make it possible not to write long
            messages inside the actual code but centralize them in better manageable separate contexts.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.FormatMessage(System.Object[])">
            <summary>
            Formats the message stored in this DiagnosticMessage instance with specified objects.
            </summary>
            <param name="args">Specifies an array of objects to format. Can be null.</param>
            <returns>Returns the formatted message. If the specified object array doesn't match the format items in the
            message stored in this DiagnosticMessage instance, the method just returns the message without any
            formatting.</returns>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.GetIntegerId">
            <summary>
            Gets an integer ID out of the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property of this DiagnosticMessage instance.
            </summary>
            <returns>Returns the greatest whole number fragment in the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property of this
            DiagnosticMessage instance as an integer. If there are no whole number fragments in the ID property, the
            return value is zero.</returns>
            <seealso cref="M:Juhta.Net.Common.DiagnosticMessage.GetIntegerId(System.String)"/>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.GetIntegerId(System.String)">
            <summary>
            Gets an integer ID out of a specified string ID.
            </summary>
            <param name="id">Specifies a string ID.</param>
            <returns>Returns the greatest whole number fragment in the specified string ID as an integer. If there are
            no whole number fragments in the string ID, the return value is zero.</returns>
            <seealso cref="M:Juhta.Net.Common.DiagnosticMessage.GetIntegerId"/>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.GetMessage">
            <summary>
            Gets the message stored in this DiagnosticMessage instance without any formatting.
            </summary>
            <returns>Returns the stored message without any formatting.</returns>
            <remarks>Use this method instead of <see cref="M:Juhta.Net.Common.DiagnosticMessage.FormatMessage(System.Object[])"/> when the message contains no format items.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.TryGetMessageId(System.Exception,System.String@)">
            <summary>
            Tries to get an ID for the message of a specified exception.
            </summary>
            <param name="exception">Specifies an exception.</param>
            <param name="messageId">If the function returns true, returns the ID of the message of the specified
            exception, otherwise returns null.</param>
            <returns>Returns true if an ID was found for the message of the specified exception, otherwise returns
            false.</returns>
            <remarks>
            <para>If the specified exception contains inner exceptions, the innermost exception with a found ID match
            is decisive (root cause exception).</para>
            <para>Searching will be done in the last formatted messages for the current thread.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.TryGetMessageId(System.String,System.String@)">
            <summary>
            Tries to get an ID for a specified message.
            </summary>
            <param name="message">Specifies a message.</param>
            <param name="messageId">If the function returns true, returns the ID of the specified message, otherwise
            returns null.</param>
            <returns>Returns true if an ID was found for the specified message, otherwise returns false.</returns>
            <remarks>Searching will be done in the last formatted messages for the current thread.</remarks>
        </member>
        <member name="P:Juhta.Net.Common.DiagnosticMessage.Id">
            <summary>
            Gets the ID of the diagnostic message that this DiagnosticMessage instance represents.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.DiagnosticMessage.Message">
            <summary>
            Gets the message associated with this DiagnosticMessage instance.
            </summary>
            <remarks>The value can contain format items.</remarks>
        </member>
        <member name="P:Juhta.Net.Common.DiagnosticMessage.Type">
            <summary>
            Gets the type of the diagnostic message that this DiagnosticMessage instance represents.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.#ctor(Juhta.Net.Common.DiagnosticMessageType,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="type">Specifies a value for the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Type"/> property.</param>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.#ctor(Juhta.Net.Common.DiagnosticMessageType,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="type">Specifies a value for the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Type"/> property.</param>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessage.SaveAsLastFormattedMessage(System.String)">
            <summary>
            Saves a specified message as a last formatted message for the current thread, and associates the current
            DiagnosticMessage instance with it.
            </summary>
            <param name="message">Specifies a message.</param>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessage.c_maxLastFormattedMessagesCount">
            <summary>
            Specifies the maximum length for the last formatted messages queue per thread.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessage.m_id">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessage.t_lastFormattedMessages">
            <summary>
            Specifies the thread-specific queue for the last formatted messages. Queue items are key/value pairs
            consisting of a formatted message and the corresponding DiagnosticMessage instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessage.m_message">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Message"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessage.m_type">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Type"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.DiagnosticMessageFactory">
            <summary>
            Represents a class that can be used to create instances of classes deriving from the <see cref="T:Juhta.Net.Common.DiagnosticMessage"/>
            class. The main benefit of using this class is automatic and consistent message ID generation.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessageFactory.#ctor(Juhta.Net.Common.DiagnosticMessageIdBase,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="messageIdBase">Specifies a message ID base.</param>
            <param name="messageNamespace">Specifies a namespace for messages to create.</param>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessageFactory.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="messageIdBase">Specifies a message ID base.</param>
            <param name="messageNamespace">Specifies a namespace for messages to create.</param>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessageFactory.#ctor(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="messageIdBase">Specifies a message ID base.</param>
            <param name="informationMessageIdPrefix">Specifies a prefix for information message IDs. Can be null.</param>
            <param name="warningMessageIdPrefix">Specifies a prefix for warning message IDs. Can be null.</param>
            <param name="errorMessageIdPrefix">Specifies a prefix for error message IDs. Can be null.</param>
            <param name="alertMessageIdPrefix">Specifies a prefix for alert message IDs. Can be null.</param>
            <remarks>IDs of created diagnostic messages will start from <paramref name="messageIdBase"/> + 1 in
            ascending order.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessageFactory.CreateAlertMessage(System.String)">
            <summary>
            Creates an AlertMessage instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created AlertMessage instance.</returns>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessageFactory.CreateErrorMessage(System.String)">
            <summary>
            Creates an ErrorMessage instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created ErrorMessage instance.</returns>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessageFactory.CreateInformationMessage(System.String)">
            <summary>
            Creates an InformationMessage instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created InformationMessage instance.</returns>
        </member>
        <member name="M:Juhta.Net.Common.DiagnosticMessageFactory.CreateWarningMessage(System.String)">
            <summary>
            Creates a WarningMessage instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created WarningMessage instance.</returns>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageFactory.m_alertMessageIdPrefix">
            <summary>
            Specifies the prefix for alert message IDs.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageFactory.m_errorMessageIdPrefix">
            <summary>
            Specifies the prefix for error message IDs.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageFactory.m_informationMessageIdPrefix">
            <summary>
            Specifies the prefix for information message IDs.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageFactory.m_nextMessageId">
            <summary>
            Specifies the next message ID (without a prefix).
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageFactory.m_warningMessageIdPrefix">
            <summary>
            Specifies the prefix for warning message IDs.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.ErrorMessage">
            <summary>
            Defines a class for error messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ErrorMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Common.ErrorMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Common.FileLogger">
            <summary>
            Defines a logger class that writes log events to a file.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logFilePath">Specifies a log file path. The path can be relative or absolute. Can be null in
            which case the default log file path will be used. The default value will also be used if
            <paramref name="logFilePath"/> specifies somehow an invalid log file path.</param>
            <remarks>
            <para>The default log file will be written to the current user's temp folder with the process name.</para>
            <para>If the log file already exists, new rows will be appended to the end of the file.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogAlert(Juhta.Net.Common.AlertMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(Juhta.Net.Common.AlertMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogAlert(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogAlert(Juhta.Net.Common.AlertMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(Juhta.Net.Common.AlertMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogAlert(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(Juhta.Net.Common.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(Juhta.Net.Common.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(System.Exception)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(Juhta.Net.Common.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(Juhta.Net.Common.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(System.Exception,System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogEvent(Juhta.Net.Common.DiagnosticMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogEvent(Juhta.Net.Common.DiagnosticMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogEvent(Juhta.Net.Common.DiagnosticMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogEvent(Juhta.Net.Common.DiagnosticMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogInformation(Juhta.Net.Common.InformationMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(Juhta.Net.Common.InformationMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogInformation(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogInformation(Juhta.Net.Common.InformationMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(Juhta.Net.Common.InformationMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogInformation(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogWarning(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogWarning(Juhta.Net.Common.WarningMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(Juhta.Net.Common.WarningMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogWarning(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.LogWarning(Juhta.Net.Common.WarningMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(Juhta.Net.Common.WarningMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.FileLogger.IsThreadSafe">
            <summary>
            See <see cref="P:Juhta.Net.Common.ILogger.IsThreadSafe"/>.
            </summary>
            <remarks>This logger is not thread-safe, we let the static <see cref="T:Juhta.Net.Logger"/> class to take care of the
            synchronization.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.EnsureLogTitle">
            <summary>
            Writes the title to the log file if such has not yet been written.
            </summary>
            <remarks>This method will also change the log file to its default value if the title cannot be written to
            the original log file.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.GetDefaultLogFilePath">
            <summary>
            Gets the default log file path.
            </summary>
            <returns>Returns the default log file path.</returns>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.WriteLogEvent(Juhta.Net.Common.DiagnosticMessageType,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a log event to the underlying log file.
            </summary>
            <param name="messageType">Specifies a message type.</param>
            <param name="messageId">Specifies a message ID.</param>
            <param name="exception">Specifies an Exception object.</param>
            <param name="messageFormat">Specifies a message format containing zero or more format items.</param>
            <param name="args">Specifies an array of format objects corresponding the format items in
            <paramref name="messageFormat"/>. Can be null if <paramref name="messageFormat"/> contains no format items.</param>
        </member>
        <member name="M:Juhta.Net.Common.FileLogger.WriteLogTitle">
            <summary>
            Writes the title to the underlying log file.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.FileLogger.c_logTitleFormat">
            <summary>
            Defines the log title format.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.FileLogger.c_tabSize">
            <summary>
            Defines the tab size for the log event message lines.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.FileLogger.m_logFilePath">
            <summary>
            Specifies the log file path. The path can be relative or absolute.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.FileLogger.m_logTitle">
            <summary>
            Specifies the log title. The value null means that the title has been written to the log file.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.FileLogger.m_processId">
            <summary>
            Specifies the ID of the process.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.FileLogger.m_processName">
            <summary>
            Specifies the name of the process.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.ILogger">
            <summary>
            Defines an interface for the loggers to be used with the framework.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogAlert(Juhta.Net.Common.AlertMessage)">
            <summary>
            Logs an alert event.
            </summary>
            <param name="message">Specifies an AlertMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogAlert(System.String)">
            <summary>
            Logs an alert event.
            </summary>
            <param name="message">Specifies an alert message.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogAlert(Juhta.Net.Common.AlertMessage,System.Object[])">
            <summary>
            Logs an alert event.
            </summary>
            <param name="message">Specifies an AlertMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogAlert(System.String,System.Object[])">
            <summary>
            Logs an alert event.
            </summary>
            <param name="messageFormat">Specifies an alert message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(Juhta.Net.Common.ErrorMessage)">
            <summary>
            Logs an error event.
            </summary>
            <param name="message">Specifies an ErrorMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(System.Exception)">
            <summary>
            Logs an error event.
            </summary>
            <param name="exception">Specifies an Exception object whose string representation determines the error
            message.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(System.String)">
            <summary>
            Logs an error event.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(Juhta.Net.Common.ErrorMessage,System.Object[])">
            <summary>
            Logs an error event.
            </summary>
            <param name="message">Specifies an ErrorMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage)">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="message">Specifies an ErrorMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(System.Exception,System.String)">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(System.String,System.Object[])">
            <summary>
            Logs an error event.
            </summary>
            <param name="messageFormat">Specifies an error message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage,System.Object[])">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="message">Specifies an ErrorMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="messageFormat">Specifies an error message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogEvent(Juhta.Net.Common.DiagnosticMessage)">
            <summary>
            Logs a diagnostic event.
            </summary>
            <param name="message">Specifies a DiagnosticMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogEvent(Juhta.Net.Common.DiagnosticMessage,System.Object[])">
            <summary>
            Logs a diagnostic event.
            </summary>
            <param name="message">Specifies a DiagnosticMessage object whose Message property contains zero or more
            format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogInformation(Juhta.Net.Common.InformationMessage)">
            <summary>
            Logs an information event.
            </summary>
            <param name="message">Specifies an InformationMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogInformation(System.String)">
            <summary>
            Logs an information event.
            </summary>
            <param name="message">Specifies an information message.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogInformation(Juhta.Net.Common.InformationMessage,System.Object[])">
            <summary>
            Logs an information event.
            </summary>
            <param name="message">Specifies an InformationMessage object whose Message property contains zero or more
            format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogInformation(System.String,System.Object[])">
            <summary>
            Logs an information event.
            </summary>
            <param name="messageFormat">Specifies an information message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogWarning(System.String)">
            <summary>
            Logs a warning event.
            </summary>
            <param name="message">Specifies a warning message.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogWarning(Juhta.Net.Common.WarningMessage)">
            <summary>
            Logs a warning event.
            </summary>
            <param name="message">Specifies a WarningMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning event.
            </summary>
            <param name="messageFormat">Specifies a warning message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.ILogger.LogWarning(Juhta.Net.Common.WarningMessage,System.Object[])">
            <summary>
            Logs a warning event.
            </summary>
            <param name="message">Specifies a WarningMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="P:Juhta.Net.Common.ILogger.IsThreadSafe">
            <summary>
            Returns true if this <see cref="T:Juhta.Net.Common.ILogger"/> instance is thread-safe, otherwise false.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.InformationMessage">
            <summary>
            Defines a class for information messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InformationMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Common.InformationMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Common.InterfaceNotSupportedException">
            <summary>
            This exception will be thrown when an object doesn't support a requested interface.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InterfaceNotSupportedException.#ctor(System.String,System.InvalidCastException)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an InvalidCastException instance that relates to the failed
            interface cast operation.</param>
        </member>
        <member name="T:Juhta.Net.Common.InternalException">
            <summary>
            This exception will be thrown when an internal error occurs.
            </summary>
            <remarks>An internal error is typically an error that should 'never happen', and it usually means some kind of
            a bug in the software.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.InternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="P:Juhta.Net.Common.InternalException.InternalErrorInfo">
            <summary>
            Gets general information about internal errors.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.InvalidConfigFileException">
            <summary>
            This exception will be thrown when an XML configuration file doesn't pass schema validation.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InvalidConfigFileException.#ctor(System.String,System.Xml.Schema.XmlSchemaValidationException)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="exception">Specifies an actual error that has occurred in the schema validation.</param>
        </member>
        <member name="T:Juhta.Net.Common.InvalidConfigValueException">
            <summary>
            This exception will be thrown when an XML configuration file has passed schema validation but in further
            analysis an invalid configuration value is encountered.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InvalidConfigValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="T:Juhta.Net.Common.ObjectFactory">
            <summary>
            A static class that provides services for creating instances of such classes whose type is not directly
            referencable in the current programming context. A typical scenario for using this class is to create instances
            of classes that are not available at the build time but are known to implement a specific interface.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an instance of a specified class by using the default constructor.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assembly">Specifies an Assembly object.</param>
            <param name="className">Specifies an assembly class name. The value can begin with a '.' character in which
            case the root namespace for the class will be taken from the file name part of the Assembly object's
            Location property.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String,System.Object[])">
            <summary>
            Creates an instance of a specified class.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assembly">Specifies an Assembly object.</param>
            <param name="className">Specifies an assembly class name. The value can begin with a '.' character in which
            case the root namespace for the class will be taken from the file name part of the Assembly object's
            Location property.</param>
            <param name="parameters">Specifies an array of parameters that will be passed to the appropriate
            constructor. Can be null causing the default constructor to be called.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri)">
            <summary>
            Creates an instance of a specified class by using the default constructor.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assemblyClassUri">Specifies an AssemblyClassUri object.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri,System.Object[])">
            <summary>
            Creates an instance of a specified class.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assemblyClassUri">Specifies an AssemblyClassUri object.</param>
            <param name="parameters">Specifies an array of parameters that will be passed to the appropriate
            constructor. Can be null causing the default constructor to be called.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
            <remarks>An exception will be thrown if the assembly referenced by <paramref name="assemblyClassUri"/> has
            not been downloaded to the local machine.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String)">
            <summary>
            Creates an instance of a specified class by using the default constructor.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assemblyFile">Specifies an assembly file.</param>
            <param name="className">Specifies an assembly class. The value can begin with a '.' character in which case
            the root namespace for the class will be taken from the file name of the assembly.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String,System.Object[])">
            <summary>
            Creates an instance of a specified class.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assemblyFile">Specifies an assembly file.</param>
            <param name="className">Specifies an assembly class. The value can begin with a '.' character in which case
            the root namespace for the class will be taken from the file name of the assembly.</param>
            <param name="parameters">Specifies an array of parameters that will be passed to the appropriate
            constructor. Can be null causing the default constructor to be called.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Xml.XmlNode)">
            <summary>
            Creates an instance based on a specified object XML node.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="objectNode">Specifies an object XML node.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="T:Juhta.Net.Common.ObjectQueue`1">
            <summary>
            Represents a first-in, first-out queue for a generic object type. The queue implemented by this class is
            thread-safe, and it also blocks readers in case of an empty queue. This queue has especially been designed to
            act as a work queue in multi-threaded applications.
            </summary>
            <typeparam name="T">Specifies an object type.</typeparam>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.Close">
            <summary>
            Closes the object queue specified by this ObjectQueue instance. The operation releases all threads that are
            blocked by the current instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.GetObject">
            <summary>
            Gets the next object from the object queue specified by this ObjectQueue instance.
            </summary>
            <returns>Returns the next instance of <i>T</i> from the queue. The return value is null only, if the queue
            was initially empty and the queue had been closed prior to the call or no object became available before
            the queue was closed during the call.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.PutObject(`0)">
            <summary>
            Puts an object to the object queue specified by this ObjectQueue instance.
            </summary>
            <param name="object">Specifies an object.</param>
        </member>
        <member name="P:Juhta.Net.Common.ObjectQueue`1.Count">
            <summary>
            Gets the number of elements contained in the object queue specified by this ObjectQueue instance.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.ObjectQueue`1.WaitEvent">
            <summary>
            Defines an enumeration for wait events.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.WaitEvent.Close">
            <summary>
            Specifies the Close event.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.WaitEvent.Put">
            <summary>
            Specifies the Put event.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_closed">
            <summary>
            Specifies whether the object queue has been closed.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_eventWaitHandles">
            <summary>
            Specifies an array of EventWaitHandle objects related to this ObjectQueue instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_mutex">
            <summary>
            Specifies a Mutex object for synchronizing concurrent access to the object queue.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_objectQueue">
            <summary>
            Specifies the underlying Queue instance.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.RegularExpressions">
            <summary>
            Defines a static class containing certain regular expression patterns for validating string data.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegularExpressions.AssemblyClassFileUri">
            <summary>
            Specifies a regular expression for validating assembly class file URIs.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegularExpressions.DirectoryPath">
            <summary>
            Specifies a regular expression for validating absolute or relative directory paths.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegularExpressions.EmailAddress">
            <summary>
            Specifies a regular expression for validating email addresses.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegularExpressions.EmailAddressList">
            <summary>
            Specifies a regular expression for validating email address lists.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegularExpressions.FilePath">
            <summary>
            Specifies a regular expression for validating absolute or relative file paths.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.Singleton`1">
            <summary>
            Defines an abstract base class singleton classes.
            </summary>
            <typeparam name="T">Specifies a type to make as singleton.</typeparam>
        </member>
        <member name="M:Juhta.Net.Common.Singleton`1.#cctor">
            <summary>
            Initializes the class.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.Singleton`1.Instance">
            <summary>
            Gets the singleton instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Singleton`1.ClearSingletonInstance">
            <summary>
            Clears the singleton instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)">
            <summary>
            Sets the singleton instance.
            </summary>
            <param name="instance">Specifies an instance of <typeparamref name="T"/> to be set as the singleton
            instance.</param>
        </member>
        <member name="F:Juhta.Net.Common.Singleton`1.s_instance">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Singleton`1.Instance"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Singleton`1.s_syncLock">
            <summary>
            Specifies a synchronization object for accessing the singleton instance.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.SymmetricCipher">
            <summary>
            Defines a class that simplifies the use of symmetric cryptographic service providers.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>Instances created with this constructor use the <see cref="T:System.Security.Cryptography.TripleDES"/> algorithm.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="symmetricAlgorithm">Specifies a SymmetricAlgorithm object.</param>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.DecryptData(System.String,System.Byte[])">
            <summary>
            Decrypts a specified array of bytes containing encrypted data.
            </summary>
            <param name="cipherKey">Specifies a cipher key.</param>
            <param name="encryptedData">Specifies an array of bytes containing encrypted data.</param>
            <returns>Returns an array of bytes containing the plain data.</returns>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.EncryptData(System.String,System.Byte[])">
            <summary>
            Encrypts a specified array of bytes containing plain data.
            </summary>
            <param name="cipherKey">Specifies a cipher key.</param>
            <param name="plainData">Specifies an array of bytes containing plain data.</param>
            <returns>Returns an array of bytes containing the encrypted data.</returns>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.CreateKeyAndInitializationVector(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Creates a key and initialization vector based on a specified cipher key.
            </summary>
            <param name="cipherKey">Specifies a cipher key.</param>
            <param name="key">A byte array that returns the key for the specified cipher key.</param>
            <param name="iv">A byte array that returns the initialization vector for the specified cipher key.</param>
        </member>
        <member name="F:Juhta.Net.Common.SymmetricCipher.m_keySize">
            <summary>
            Specifies the key size to use with the associated SymmetricAlgorithm object. The class determines the key
            size by selecting the maximum key size supported by <see cref="F:Juhta.Net.Common.SymmetricCipher.m_symmetricAlgorithm"/>.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.SymmetricCipher.m_symmetricAlgorithm">
            <summary>
            Specifies a SymmetricAlgorithm object that performs actual encryption and decryption operations.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.TimestampFactory">
            <summary>
            Defines a class for generating unique 21-digit timestamps. Timestamps will be returned in Coordinated Universal
            Time (UTC). This class is thread-safe.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.TimestampFactory.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.TimestampFactory.GetUniqueTimestamp">
            <summary>
            Gets a 21-digit unique timestamp.
            </summary>
            <returns>Returns the unique timestamp that was given to the calling thread.</returns>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_created">
            <summary>
            Specifies the time when this <see cref="T:Juhta.Net.Common.TimestampFactory"/> instance was created.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_lastTimestamp">
            <summary>
            Specifies the last timestamp that was returned from this <see cref="T:Juhta.Net.Common.TimestampFactory"/> instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_stopwatch">
            <summary>
            Measures the elapsed time since this <see cref="T:Juhta.Net.Common.TimestampFactory"/> instance was created.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_syncLock">
            <summary>
            Specifies a synchronization object for serializing concurrent access.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.DiagnosticMessageIdBase">
            <summary>
            An enumeration that defines the diagnostic message ID bases used in the framework libraries.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageIdBase.RootLibraryMessages">
            <summary>
            Defines the message ID base for the root library messages.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageIdBase.CommonMessages">
            <summary>
            Defines the message ID base for the common messages.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.DiagnosticMessageType">
            <summary>
            Defines an enumeration for the diagnostic message types.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageType.Alert">
            <summary>
            The diagnostic message is an alert message.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageType.Error">
            <summary>
            The diagnostic message is an error message.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageType.Information">
            <summary>
            The diagnostic message is an information message.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.DiagnosticMessageType.Warning">
            <summary>
            The diagnostic message is a warning message.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.UnexpectedException">
            <summary>
            This exception will be thrown when an unexpected error occurs.
            </summary>
            <remarks>An error is considered as unexpected when it occurs in a code context that doesn't contain error-
            sensitive functionality such as network communication or file I/O operations.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.UnexpectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an inner exception that determines the actual unexpected error.</param>
        </member>
        <member name="T:Juhta.Net.Common.UnimplementedCodeBranchException">
            <summary>
            This exception will be thrown when the execution flow of software reaches a code branch that should in practise
            never be reached.
            </summary>
            <remarks>Generally it's better to throw this kind of exception than to do nothing which can easily lead to
            weird or even error behaviour in the later execution.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.UnimplementedCodeBranchException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.UnimplementedCodeBranchException.#ctor(System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="hint">Specifies a hint object.</param>
        </member>
        <member name="M:Juhta.Net.Common.UnimplementedCodeBranchException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="hint">Specifies a hint string.</param>
        </member>
        <member name="T:Juhta.Net.Common.Utf8FileWriter">
            <summary>
            Defines a writer class for UTF8-encoded files.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="filePath">Specifies the ablosute or a relative path of a UTF8-encoded file where data will be
            written. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="filePath">Specifies the ablosute or a relative path of a UTF8-encoded file where data will be
            written.</param>
            <param name="openMode">Specifies how the UTF8-encoded file should be opened.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Close">
            <summary>
            Flushes all unwritten data to the underlying UTF8-encoded file, and after that, closes the file.
            </summary>
            <remarks>This method does nothing if the underlying UTF8-encoded file is not open.</remarks>
            <seealso cref="M:Juhta.Net.Common.Utf8FileWriter.Open"/>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.DecreaseIndentLevel">
            <summary>
            Decreases the current indent level by one.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Flush">
            <summary>
            Flushes all unwritten data to the underlying UTF8-encoded file.
            </summary>
            <remarks>This method does nothing if the underlying UTF8-encoded file is not open.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.IncreaseIndentLevel">
            <summary>
            Increases the current indent level by one.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Open">
            <summary>
            Opens the underlying UTF8-encoded file.
            </summary>
            <remarks>
            <para>This method does nothing if the underlying UTF8-encoded file is already open.</para>
            <para>This method does not necessarily have to be called when writing data to the underlying UTF8-encoded
            file. If the file is not open, it will be automatically opened and closed in context of each write
            operation. However, recurrent openings and closings of the file might cause some performance loss. To gain
            the maximum performance, the file should be opened with an explicit call on this method prior to write
            operations. In this case, the file must also be explicitly closed with the <see cref="M:Juhta.Net.Common.Utf8FileWriter.Close"/> method.</para>
            </remarks>
            <seealso cref="M:Juhta.Net.Common.Utf8FileWriter.Close"/>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Write(System.String)">
            <summary>
            Writes a specified string to the underlying UTF8-encoded file.
            </summary>
            <param name="s">Specifies a string.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Write(System.String,System.Object[])">
            <summary>
            Writes a formatted string to the underlying UTF8-encoded file.
            </summary>
            <param name="format">Specifies a string containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="format"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine">
            <summary>
            Writes a line terminator to the underlying UTF8-encoded file.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine(System.Int32)">
            <summary>
            Writes a specified number of line terminators to the underlying UTF8-encoded file.
            </summary>
            <param name="count">Specifies a number of line terminators to write.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine(System.String)">
            <summary>
            Writes a specified string followed by a line terminator to the underlying UTF8-encoded file.
            </summary>
            <param name="s">Specifies a string.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a formatted string followed by a line terminator to the underlying UTF8-encoded file.
            </summary>
            <param name="format">Specifies a string containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="format"/>.</param>
        </member>
        <member name="P:Juhta.Net.Common.Utf8FileWriter.FilePath">
            <summary>
            Gets the absolute path of the underlying UTF8-encoded file.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel">
            <summary>
            Gets or sets the current indent level.
            </summary>
            <remarks>The result of the multiplication of <see cref="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel"/> and <see cref="P:Juhta.Net.Common.Utf8FileWriter.TabSize"/> determines
            the number of space characters to write at the beginning of each new line.</remarks>
            <seealso cref="P:Juhta.Net.Common.Utf8FileWriter.TabSize"/>
        </member>
        <member name="P:Juhta.Net.Common.Utf8FileWriter.TabSize">
            <summary>
            Gets or sets the current tab size.
            </summary>
            <seealso cref="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel"/>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Write(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes data to the underlying UTF8-encoded file.
            </summary>
            <param name="endWithLineTerminator">If true, a line terminator will be finally written to the file.</param>
            <param name="format">Specifies a string containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="format"/>. Can be null.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLineTerminators(System.Int32)">
            <summary>
            Writes a specified number of line terminators to the underlying UTF8-encoded file.
            </summary>
            <param name="count">Specifies a number of line terminators to write.</param>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.c_defaultTabSize">
            <summary>
            Specifies the default tab size.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_atBeginningOfLine">
            <summary>
            Determines whether the file pointer of the underlying UTF8-encoded file is currently at the beginning of a
            line.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_filePath">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Utf8FileWriter.FilePath"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_fileWriter">
            <summary>
            Specifies a StreamWriter object for writing data to the underlying UTF8-encoded file.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_indentLevel">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_openMode">
            <summary>
            Specifies the mode with which the underlying UTF8-encoded file must be opened for the first time. After the
            first opening, this field will be updated to <see cref="F:System.IO.FileMode.Append"/>.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_tabSize">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Utf8FileWriter.TabSize"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.WarningMessage">
            <summary>
            Defines a class for warning messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.WarningMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Common.WarningMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Common.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Common.XmlValidator">
            <summary>
            A wrapper class that makes easier to validate XML documents against XML schemas.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.AddSchema(System.Xml.Schema.XmlSchema)">
            <summary>
            Adds an XML schema to this validator instance.
            </summary>
            <param name="schema">Specifies an XmlSchema object.</param>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.AddSchema(System.String)">
            <summary>
            Adds an XML schema to this validator instance.
            </summary>
            <param name="schema">Specifies an XML schema string.</param>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.AddSchema(System.Uri)">
            <summary>
            Adds an XML schema to this validator instance.
            </summary>
            <param name="schemaUri">Specifies the URI of a schema to be added to the instance.</param>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.Validate(System.Xml.XmlDocument)">
            <summary>
            Validates a specified XML document.
            </summary>
            <param name="document">Specifies an XmlDocument object.</param>
            <remarks>If the XML document contains validation errors, the function collects the corresponding exceptions
            to an exception chain of the type XmlSchemaValidationException. This exception chain will be thrown after
            the validation process is finished.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.Validate(System.Xml.XmlDocument,System.String)">
            <summary>
            Validates a specified XML document against a specified XML schema.
            </summary>
            <param name="document">Specifies an XmlDocument object.</param>
            <param name="schema">Specifies an XML schema as a string.</param>
            <remarks>If the XML document contains validation errors, the function collects the corresponding exceptions
            to an exception chain of the type XmlSchemaValidationException. This exception chain will be thrown after
            the validation process is finished.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.Validate(System.Xml.XmlDocument,System.Xml.Schema.XmlSchema)">
            <summary>
            Validates a specified XML document against a specified XML schema.
            </summary>
            <param name="document">Specifies an XmlDocument object.</param>
            <param name="schema">Specifies an XmlSchema object.</param>
            <remarks>If the XML document contains validation errors, the function collects the corresponding exceptions
            to an exception chain of the type XmlSchemaValidationException. This exception chain will be thrown after
            the validation process is finished.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.XmlValidator.ValidationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Implements a validation event handler.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.XmlValidator.m_schemaSet">
            <summary>
            Specifies a set of XML schemas added to this instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.XmlValidator.m_validationException">
            <summary>
            Specifies the latest validation exception chain.
            </summary>
        </member>
        <member name="T:Juhta.Net.Extensions.AppDomainExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.AppDomain"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.AppDomainExtensions.GetAssemblyByFileName(System.AppDomain,System.String)">
            <summary>
            Gets a loaded assembly by an assembly file name.
            </summary>
            <param name="appDomain">Specifies the current AppDomain instance.</param>
            <param name="assemblyFileName">Specifies an assembly file name.</param>
            <returns>Returns the first loaded Assembly instance whose Location property's file name part matches the
            specified assembly file name, or null, if no match was found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AppDomainExtensions.GetAssemblyByPath(System.AppDomain,System.String)">
            <summary>
            Gets a loaded assembly by an assembly path.
            </summary>
            <param name="appDomain">Specifies the current AppDomain instance.</param>
            <param name="assemblyPath">Specifies an assembly path.</param>
            <returns>Returns the first loaded Assembly instance whose Location property ends with the specified
            assembly path, or null, if no match was found.</returns>
            <remarks>The path specified by <paramref name="assemblyPath"/> does not necessarily have to be absolute.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.AppDomainExtensions.GetAssemblyByTypeName(System.AppDomain,System.String)">
            <summary>
            Gets a loaded assembly by a type name.
            </summary>
            <param name="appDomain">Specifies the current AppDomain instance.</param>
            <param name="typeName">Specifies a full type name.</param>
            <returns>Returns the first loaded assembly that contains the specified type, or null, if the type was not
            found in any loaded assembly.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.ArrayExtensions">
            <summary>
            Defines a static class containing extension methods for the <see cref="T:System.Array"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.ArrayExtensions.ToStringArray(System.Array)">
            <summary>
            Converts the current Array instance to a string array.
            </summary>
            <param name="array">Specifies the current Array instance.</param>
            <returns>Returns the current Array instance as a string array.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.AssemblyExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets the first attribute of a specified type from the current assembly.
            </summary>
            <typeparam name="TAttribute">Specifies an attribute type.</typeparam>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the first attribute of the specified type, or null, if no attributes of the specified type
            were found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            Gets the attributes of a specified type from the current assembly.
            </summary>
            <typeparam name="TAttribute">Specifies an attribute type.</typeparam>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the attributes of the specified type, or null, if no attributes of the specified type were
            found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetCompany(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Company attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Company attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetCopyright(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Copyright attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Copyright attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetDescription(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Description attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Description attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetDirectory(System.Reflection.Assembly)">
            <summary>
            Gets the directory of the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the directory of the current assembly without an ending directory separator.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetProduct(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Product attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Product attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetTitle(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Title attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Title attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetVersion(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Version attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Version attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.LoadEmbeddedResourceFile(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded resource file from the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <param name="fileName">Specifies the name of a resource file to be loaded.</param>
            <returns>Returns the contents of the requested resource file.</returns>
            <remarks>This method loads the first resource file whose name matches the specified file name regardless of
            the file namespace.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.LoadEmbeddedResourceFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Loads an embedded resource file from the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <param name="fileName">Specifies the name of a resource file to be loaded.</param>
            <param name="fileNamespace">Specifies the namespace of a resource file to be loaded. Can be null in which
            case the method loads the first resource file whose name matches the specified file name.</param>
            <returns>Returns the contents of the requested resource file.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.DateTimeExtensions">
            <summary>
            Defines a static class containing extension methods for the <see cref="T:System.DateTime"/> structure.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToDigitTimestamp(System.DateTime)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent 21-digit timestamp.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <returns>Returns the value of the current DateTime instance as a 21-digit timestamp.</returns>
            <remarks>Digit timestamps contain no separators between the timestamp parts. The number of digits
            expressing fractional seconds is 7.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime,System.Char)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <param name="dateTimeSeparator">Specifies a character that is used to separate the date and time part in
            the timestamp.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime,System.Char,System.Boolean)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <param name="dateTimeSeparator">Specifies a character that is used to separate the date and time part in
            the timestamp.</param>
            <param name="addFractionalSeconds">If true, adds fractional seconds to the timestamp.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <param name="dateTimeSeparator">Specifies a character that is used to separate the date and time part in
            the timestamp.</param>
            <param name="addFractionalSeconds">If true, adds fractional seconds to the timestamp.</param>
            <param name="addUtcOffset">If true, adds the offset to Coordinated Universal Time to the timestamp.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.EventHandlerExtensions">
            <summary>
            Defines a static class containing extension methods for the <see cref="T:System.EventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.EventHandlerExtensions.RaiseEvent(System.EventHandler,System.Object)">
            <summary>
            Raises the event specified by this EventHandler delegate.
            </summary>
            <param name="eventHandler">Specifies the current EventHandler delegate.</param>
            <param name="sender">Specifies an event source.</param>
        </member>
        <member name="M:Juhta.Net.Extensions.EventHandlerExtensions.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event specified by this EventHandler delegate.
            </summary>
            <typeparam name="TEventArgs">Specifies the type of the event data.</typeparam>
            <param name="eventHandler">Specifies the current EventHandler delegate.</param>
            <param name="sender">Specifies an event source.</param>
            <param name="eventArgs">Specifies an object containing the event data.</param>
        </member>
        <member name="T:Juhta.Net.Extensions.FileStreamExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.IO.FileStream"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.Lock(System.IO.FileStream,System.Int32)">
            <summary>
            Locks the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.Lock(System.IO.FileStream,System.Int64,System.Int64,System.Int32)">
            <summary>
            Locks a range of the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="position">Specifies the position of a range to lock.</param>
            <param name="length">Specifies the length in bytes of a range to lock.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.TryLock(System.IO.FileStream,System.Int32)">
            <summary>
            Tries to lock the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
            <returns>Returns true if a lock to the file was aqcuired within the specified timeout, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.TryLock(System.IO.FileStream,System.Int64,System.Int64,System.Int32)">
            <summary>
            Tries to lock a range of the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="position">Specifies the position of a range to lock.</param>
            <param name="length">Specifies the length in bytes of a range to lock.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
            <returns>Returns true if a lock to the range of the file was aqcuired within the specified timeout,
            otherwise false.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.StringExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ContainsWhitespaces(System.String)">
            <summary>
            Checks whether this string contains white space characters.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns true if this string contains white space characters, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.EnsureEnd(System.String,System.String)">
            <summary>
            Ensures this string to end with a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string with which this string is ensured to end with.</param>
            <returns>Returns such copy of this string that ends with <paramref name="end"/>.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.EnsureEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Ensures this string to end with a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string with which this string is ensured to end with.</param>
            <param name="stringComparison">Specifies a StringComparison value.</param>
            <returns>Returns such copy of this string that ends with <paramref name="end"/>.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.FromBase64String(System.String)">
            <summary>
            Converts this base64 string to its equivalent string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns the string representation of this base64 string.</returns>
            <remarks>This method performs string conversions through the UTF-8 encoding.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            Checks whether a specified regular expression matches this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="regex">Specifies a regular expression. Anchor characters '^' (at the start) and '$' (at the
            end) are not required.</param>
            <returns>Returns true if the specified regular expression matches this string, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveEnd(System.String,System.String)">
            <summary>
            Removes a specified end from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string that will be removed from the end of this string.</param>
            <returns>Returns such copy of this string from which the specified end has been removed. If this string
            doesn't end with the specified end, returns a copy of this string.</returns>
            <remarks>This method is case-sensitive.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Removes a specified end from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string that will be removed from the end of this string.</param>
            <param name="stringComparison">Specifies a StringComparison value.</param>
            <returns>Returns such copy of this string from which the specified end has been removed. If this string
            doesn't end with the specified end, returns a copy of this string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveStart(System.String,System.String)">
            <summary>
            Removes a specified start from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="start">Specifies a string that will be removed from the start of this string.</param>
            <returns>Returns such copy of this string from which the specified start has been removed. If this string
            doesn't start with the specified start, returns a copy of this string.</returns>
            <remarks>This method is case-sensitive.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveStart(System.String,System.String,System.StringComparison)">
            <summary>
            Removes a specified start from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="start">Specifies a string that will be removed from the start of this string.</param>
            <param name="stringComparison">Specifies a StringComparison value.</param>
            <returns>Returns such copy of this string from which the specified start has been removed. If this string
            doesn't start with the specified start, returns a copy of this string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ReplaceHtmlSpecialCharacters(System.String)">
            <summary>
            Replaces all HTML special characters with their corresponding entities in this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns such copy of this string where all occurrences of HTML special characters have been
            replaced with their corresponding entities.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ReplaceXmlSpecialCharacters(System.String)">
            <summary>
            Replaces all XML special characters with their corresponding entities in this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns such copy of this string where all occurrences of XML special characters have been
            replaced with their corresponding entities.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringAfter(System.String,System.Char,System.StringComparison)">
            <summary>
            Gets a substring from this string after the first occurrence of a specified character.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a character to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string after the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringAfter(System.String,System.String,System.StringComparison)">
            <summary>
            Gets a substring from this string after the first occurrence of a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a string to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string after the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringBefore(System.String,System.Char,System.StringComparison)">
            <summary>
            Gets a substring from this string before the first occurrence of a specified character.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a character to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string before the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringBefore(System.String,System.String,System.StringComparison)">
            <summary>
            Gets a substring from this string before the first occurrence of a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a string to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string before the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ToBase64String(System.String)">
            <summary>
            Converts this string to its equivalent base64 string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns the base64 string representation of this string.</returns>
            <remarks>This method performs base64 string conversions through the UTF-8 encoding.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ToBoolean(System.String)">
            <summary>
            Converts this string to an equivalent <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns this string as an equivalent <see cref="T:System.Boolean"/> value.</returns>
            <remarks>This method is otherwise equivalent to <see cref="M:System.Convert.ToBoolean(System.String)"/>, but it also
            accepts the values "1" and "0" as valid string representatives for the boolean values True and False,
            respectively.</remarks>
        </member>
        <member name="T:Juhta.Net.Extensions.XmlNodeExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.Xml.XmlNode"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String)">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="childName">Specifies a name for the child node.</param>
            <returns>Returns the appended child node.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="childName">Specifies a name for the child node.</param>
            <param name="childInnerText">Specifies an inner text for the child node.</param>
            <returns>Returns the appended child node.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="qualifiedChildName">Specifies a qualified name for the child node.</param>
            <param name="namespaceUri">Specifies a namespace URI for the child node.</param>
            <param name="innerText">Specifies an inner text for the child node. Can be null.</param>
            <returns>Returns the appended child node.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String[],System.String[])">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="childName">Specifies a name for the child node.</param>
            <param name="childInnerText">Specifies an inner text for the child node. Can be null.</param>
            <param name="attributeNames">A string array specifying names for the attributes to be added to the child
            node. Can be null.</param>
            <param name="attributeValues">A string array specifying values for the attributes to be added to the child
            node. This parameter will be ignored if <paramref name="attributeNames"/> is null.</param>
            <returns>Returns the appended child node.</returns>
            <remarks>The lengths of the arrays <paramref name="attributeNames"/> and <paramref name="attributeValues"/>
            must match.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.CopyTo(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Copies the current node to another node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="destination">Specifies a destination node.</param>
            <remarks>Copying covers all attributes and child nodes.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an attribute value from the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies an attribute name.</param>
            <returns>Returns the value of the specified attribute or an empty string, if the attribute wasn't found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets an attribute value from the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies an attribute name.</param>
            <param name="defaultValue">Specifies a default value for the attribute.</param>
            <returns>Returns the value of the specified attribute or the default value, if the attribute wasn't found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Checks whether the current node has a specified attribute.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies an attribute name.</param>
            <returns>Returns true if the current node has the specified attribute, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets an attribute to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies a name for the attribute to be set.</param>
            <param name="value">Specifies a value for the attribute to be set.</param>
            <remarks>If the attribute already exists the function just updates its value.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)">
            <summary>
            Converts this XmlNode instance to a built-in type object based on its type and value attributes that are
            assumed to exist in the node.
            </summary>
            <param name="node">Specifies the current XmlNode instance.</param>
            <returns>Returns the built-in type object, that is, the result of the conversion.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray(System.Xml.XmlNode)">
            <summary>
            Converts the child nodes of this XmlNode instance to an array of built-in type objects.
            </summary>
            <param name="node">Specifies the current XmlNode instance.</param>
            <returns>Returns an array of the built-in type objects, that is, the result of the conversion.</returns>
            <seealso cref="M:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)"/>
        </member>
        <member name="T:Juhta.Net.Extensions.XmlSchemaExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.Xml.Schema.XmlSchema"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlSchemaExtensions.GetAttributeDefaultValue(System.Xml.Schema.XmlSchema,System.String,System.String)">
            <summary>
            Gets an attribute's default value from the current XmlSchema instance.
            </summary>
            <param name="schema">Specifies the current XmlSchema object.</param>
            <param name="complexTypeName">Specifies the name of a complex type containing the attribute.</param>
            <param name="attributeName">Specifies an attribute name.</param>
            <returns>Returns the default value of the attribute or null if the complex type or the attribute has not
            been defined in the schema.</returns>
        </member>
        <member name="T:Juhta.Net.FrameworkConfig">
            <summary>
            A static class providing common methods and properties related to configuration files of the framework
            libraries.
            </summary>
        </member>
        <member name="M:Juhta.Net.FrameworkConfig.CreateNamespaceManager(System.String,System.Xml.XmlDocument,System.String)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNamespaceManager"/> object corresponding to a specified framework library, XML
            configuration and schema version.
            </summary>
            <param name="libraryFileName">Specifies a framework library file name.</param>
            <param name="config">Specifies an <see cref="T:System.Xml.XmlDocument"/> object containing a library configuration.</param>
            <param name="schemaVersion">Specifies the schema version of the library configuration.</param>
            <returns>Returns the created <see cref="T:System.Xml.XmlNamespaceManager"/> object.</returns>
        </member>
        <member name="M:Juhta.Net.FrameworkConfig.GetLibraryConfigXmlns(System.String,System.String)">
            <summary>
            Gets the configuration schema namespace for a framework library.
            </summary>
            <param name="libraryFileName">Specifies a framework library file name.</param>
            <param name="schemaVersion">Specifies a schema version.</param>
            <returns>Returns the configuration schema namespace for the specified framework library.</returns>
        </member>
        <member name="P:Juhta.Net.FrameworkConfig.CommonConfigFileName">
            <summary>
            Gets the file name of the common configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkConfig.CommonConfigFileNamespace">
            <summary>
            Gets the file namespace of the common configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkConfig.RootConfigFileName">
            <summary>
            Gets the file name of the root configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkConfig.RootConfigFileNamespace">
            <summary>
            Gets the file namespace of the root configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkConfig.RootConfigVersion">
            <summary>
            Gets the version of the root configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkConfig.RootXmlns">
            <summary>
            Gets the root XML namespace for the configuration schemas of the framework libraries.
            </summary>
        </member>
        <member name="F:Juhta.Net.FrameworkConfig.c_commonConfigFileName">
            <summary>
            Defines the file name of the common configuration XML schema.
            </summary>
        </member>
        <member name="F:Juhta.Net.FrameworkConfig.c_rootConfigFileName">
            <summary>
            Defines the file name of the root configuration XML schema.
            </summary>
        </member>
        <member name="F:Juhta.Net.FrameworkConfig.c_rootConfigVersion">
            <summary>
            Defines the version of the root configuration XML schema.
            </summary>
        </member>
        <member name="F:Juhta.Net.FrameworkConfig.c_rootXmlns">
            <summary>
            Defines the root XML namespace for the configuration schemas of the framework libraries.
            </summary>
        </member>
        <member name="T:Juhta.Net.FrameworkInfo">
            <summary>
            A static class that provides read-only information about the framework.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkInfo.Copyright">
            <summary>
            Gets the copyright of the framework.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkInfo.FrameworkName">
            <summary>
            Gets the name of the framework.
            </summary>
        </member>
        <member name="P:Juhta.Net.FrameworkInfo.RootNamespace">
            <summary>
            Gets the root namespace of the framework.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.ConfigFileWatcher">
            <summary>
            Defines a class that watches configuration file changes. This class raises an appropriate event every time a
            configuration file is created, updated or deleted in the configuration directory.
            </summary>
            <remarks>
            <para>The implementation relies on the <see cref="T:System.IO.FileSystemWatcher"/> class. The reason why this class isn't
            used as such is the fact that it raises multiple events per a single file system operation causing unnecessary
            configuration updates to take place.</para>
            <para>This class queues all file events caused by a single file system operation, which is done by waiting for
            a certain time period for all these events to occur. After that the class determines which one of the three
            events, <see cref="E:Juhta.Net.LibraryManagement.ConfigFileWatcher.ConfigFileCreated"/>, <see cref="E:Juhta.Net.LibraryManagement.ConfigFileWatcher.ConfigFileChanged"/> or <see cref="E:Juhta.Net.LibraryManagement.ConfigFileWatcher.ConfigFileDeleted"/>,
            has actually occurred. Finally, that event will be raised for outside subscribers.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.ConfigFileWatcher.StartWatching(System.String)">
            <summary>
            Starts an asynchronous watching of configuration file changes.
            </summary>
            <param name="configDirectory">Specifies a configuration directory to watch.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.ConfigFileWatcher.StopWatching">
            <summary>
            Stops the asynchronous watching of configuration file changes.
            </summary>
        </member>
        <member name="E:Juhta.Net.LibraryManagement.ConfigFileWatcher.ConfigFileChanged">
            <summary>
            Occurs when a configuration file is changed in the configuration directory associated with this
            ConfigFileWatcher instance.
            </summary>
        </member>
        <member name="E:Juhta.Net.LibraryManagement.ConfigFileWatcher.ConfigFileCreated">
            <summary>
            Occurs when a configuration file is created in the configuration directory associated with this
            ConfigFileWatcher instance.
            </summary>
        </member>
        <member name="E:Juhta.Net.LibraryManagement.ConfigFileWatcher.ConfigFileDeleted">
            <summary>
            Occurs when a configuration file is deleted in the configuration directory associated with this
            ConfigFileWatcher instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.ConfigFileWatcher.OnConfigFileEvent(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handles the file system events raised by an internal <see cref="T:System.IO.FileSystemWatcher"/> object.
            </summary>
            <param name="source">Specifies the source of the event.</param>
            <param name="e">Specifies the event data.</param>
            <remarks>This method does nothing if the watching has been stopped.</remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.ConfigFileWatcher.RaiseConfigFileEvent(System.Object)">
            <summary>
            Raises the pending configuration file event for a specified configuration file.
            </summary>
            <param name="configFileName">Specifies a configuration file name.</param>
            <remarks>This method does nothing if the watching has been stopped or there is no pending configuration
            file event for the specified configuration file.</remarks>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.ConfigFileWatcher.c_waitTimePeriod">
            <summary>
            Specifies the time period in milliseconds to wait for all file events to occur caused by a single file
            system operation.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.ConfigFileWatcher.m_configFileEvents">
            <summary>
            Specifies a collection of pending configuration file events. The collection is indexed by the configuration
            file name.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.ConfigFileWatcher.m_configFileWatcher">
            <summary>
            Specifies a FileSystemWatcher object that watches configuration file changes in the configuration
            directory.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.ConfigFileWatcher.m_syncLock">
            <summary>
            Specifies a synchronization object to handle concurrent access to the fields of this class.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.ConfigFileWatcher.m_timers">
            <summary>
            Specifies a collection of timers corresponding to pending configuration file events. The collection is
            indexed by the configuration file name.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.DynamicLibraryContext`2">
            <summary>
            Defines a class that simplifies the implementation of dynamic library services. The class acquires a read-lock
            to the state of the dynamic library and provides access both to the handle and state of the library. In other
            words, the class saves a developer of a dynamic library from storing the instances of the current handle and
            state within the library.
            </summary>
            <typeparam name="TDynamicLibrary">Specifies a dynamic library type.</typeparam>
            <typeparam name="TLibraryState">Specifies a library state type.</typeparam>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.Dispose">
            <summary>
            Disposes the instance, that is, releases the acquired read-lock to the state of the library.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary">
            <summary>
            Gets the dynamic library instance.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState">
            <summary>
            Gets the library state instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.#ctor(`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dynamicLibrary">Specifies a dynamic library instance to be associated with the context.</param>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.m_disposed">
            <summary>
            Specifies whether this instance has been disposed.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.m_dynamicLibrary">
            <summary>
            Stores the <see cref="P:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.m_libraryState">
            <summary>
            Stores the <see cref="P:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase">
            <summary>
            Defines an abstract base class for dynamic library handles.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase.LibraryState">
            <summary>
            See <see cref="P:Juhta.Net.LibraryManagement.IDynamicLibrary.LibraryState"/>.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase.LibraryStateLock">
            <summary>
            See <see cref="P:Juhta.Net.LibraryManagement.IDynamicLibrary.LibraryStateLock"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="libraryFileName">Specifies a value for the <see cref="P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName"/>
            property.</param>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase.m_libraryState">
            <summary>
            Stores the <see cref="P:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase.LibraryState"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase.m_libraryStateLock">
            <summary>
            Stores the <see cref="P:Juhta.Net.LibraryManagement.DynamicLibraryHandleBase.LibraryStateLock"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IClosableLibrary">
            <summary>
            Defines an interface for closable libraries. A library is closable if it requires specific closing actions.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IClosableLibrary.CloseLibrary">
            <summary>
            Closes the library, that is, performs required closing actions to release the library resources gracefully.
            </summary>
            <returns>Returns true if the library was closed without errors, or false if at least one error occurred in
            the closing process.</returns>
            <remarks>
            <para>This method should not throw exceptions. It is recommended that, in case of an error, the error is
            logged and the closing process is continued for the rest of the closing actions. In other words, the method
            should close the library as completely as possible.</para>
            <para>This method will be called even if the initialization process of the library has failed. This means
            that the method should prepare for such situation where the library is not initialized at all or
            initialized only partially.</para>
            </remarks>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IClosableLibraryState">
            <summary>
            Defines an interface for closable library states. A library state is closable if it requires specific closing
            actions.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IClosableLibraryState.Close">
            <summary>
            Closes the library state, that is, performs required closing actions to release the library state resources
            gracefully.
            </summary>
            <returns>Returns true if the library state was closed without errors, or false if at least one error
            occurred in the closing process.</returns>
            <remarks>
            <para>This method should not throw exceptions. It is recommended that, in case of an error, the error is
            logged and the closing process is continued for the rest of the closing actions. In other words, the method
            should close the library state as completely as possible.</para>
            <para>This method will be called even if the initialization process of the library state has failed. This
            means that the method should prepare for such situation where the library state is not initialized at all
            or initialized only partially.</para>
            </remarks>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IConfigurableLibrary">
            <summary>
            Defines a base interface for configurable libraries. A library is configurable if it requires specific startup
            operations and those operations need configuration.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.IConfigurableLibrary.ConfigFileName">
            <summary>
            Gets the name of the configuration file.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.ICustomXmlConfigurableLibrary">
            <summary>
            Defines an interface for custom XML configurable libraries. A library is custom XML configurable if it is
            configurable and the configuration is done with a custom XML configuration.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.ICustomXmlConfigurableLibrary.GetConfigSchemas">
            <summary>
            Gets the XML schemas to which configuration files must conform.
            </summary>
            <returns>Returns an array of <see cref="T:System.Xml.Schema.XmlSchema"/> objects.</returns>
            <remarks>The return value null indicates that the configuration of the library is not controlled by XML
            schemas.</remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.ICustomXmlConfigurableLibrary.InitializeLibrary(System.Xml.XmlDocument)">
            <summary>
            Initializes the library based on a specified XML configuration.
            </summary>
            <param name="config">Specifies an <see cref="T:System.Xml.XmlDocument"/> object containing an XML configuration for the
            library.</param>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.ICustomXmlConfigurableLibraryState">
            <summary>
            Defines an interface for custom XML configurable library states.
            </summary>
            <remarks>Custom XML configurable library states relate to dynamic custom XML configurable libraries.</remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.ICustomXmlConfigurableLibraryState.Initialize(System.Xml.XmlDocument)">
            <summary>
            Initializes the library state based on a specified XML configuration.
            </summary>
            <param name="config">Specifies an <see cref="T:System.Xml.XmlDocument"/> object containing an XML configuration for the
            library state.</param>
            <remarks>Initializing a library state means performing all necessary actions on the objects comprising the
            library state so that the state is ready to be set as the effective library state.</remarks>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IDefaultLibraryState">
            <summary>
            Defines an interface for default library states.
            </summary>
            <remarks>Default library states relate to dynamic initializable libraries.</remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IDefaultLibraryState.Initialize">
            <summary>
            Initializes the library state.
            </summary>
            <remarks>
            <para>Initializing a library state means performing all necessary actions on the objects comprising the
            library state so that the state is ready to be set as the effective library state.</para>
            <para>Default library states don't require any configuration for initialization.</para>
            </remarks>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IDynamicCustomXmlConfigurableLibrary">
            <summary>
            Defines an interface for dynamic custom XML configurable libraries. A library is a dynamic custom XML
            configurable library if it is dynamic, configurable and the configuration is done with a custom XML
            configuration.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IDynamicCustomXmlConfigurableLibrary.CreateLibraryState">
            <summary>
            Creates an uninitialized library state.
            </summary>
            <returns>Returns an uninitialized <see cref="T:Juhta.Net.LibraryManagement.ICustomXmlConfigurableLibraryState"/> object.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IDynamicCustomXmlConfigurableLibrary.GetConfigSchemas">
            <summary>
            Gets the XML schemas to which configuration files must conform.
            </summary>
            <returns>Returns an array of <see cref="T:System.Xml.Schema.XmlSchema"/> objects.</returns>
            <remarks>The return value null indicates that the configuration of the library is not controlled by XML
            schemas.</remarks>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IDynamicInitializableLibrary">
            <summary>
            Defines an interface for dynamic initializable libraries. A library is a dynamic initializable library if it is
            dynamic and its state can be initialized at the runtime.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IDynamicInitializableLibrary.CreateDefaultLibraryState">
            <summary>
            Creates the default state for the library.
            </summary>
            <returns>Returns an <see cref="T:Juhta.Net.LibraryManagement.IDefaultLibraryState"/> object containing the default state for the library.
            </returns>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IDynamicLibrary">
            <summary>
            Defines a base interface for dynamic libraries. A dynamic library is a library whose state can be dynamically
            changed at the runtime e.g. by modifying the configuration of the library.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.IDynamicLibrary.LibraryState">
            <summary>
            Gets or sets the current state of the library.
            </summary>
            <remarks>
            <para>The setter can assume that the specified <see cref="T:Juhta.Net.LibraryManagement.ILibraryState"/> object is initialized.</para>
            <para>The setter is expected not to throw exceptions. The setter should be implemented by just using
            assignments from the properties of the specified <see cref="T:Juhta.Net.LibraryManagement.ILibraryState"/> object to the properties of
            the corresponding library classes.</para>
            <para>A recommended design pattern is that a library state object is an aggregate object for the objects
            comprising the library state.</para>
            </remarks>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.IDynamicLibrary.LibraryStateLock">
            <summary>
            Gets a <see cref="T:System.Threading.ReaderWriterLockSlim"/> object managing concurrent access to the current state of the
            library.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IInitializableLibrary">
            <summary>
            Defines an interface for initializable libraries. A library is initializable if it requires initialization
            operations and those operations don't need any configuration.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IInitializableLibrary.InitializeLibrary">
            <summary>
            Initializes the library, that is, performs required initialization operations to make library services
            properly available.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.ILibraryHandle">
            <summary>
            Defines an interface for library handle classes. This interface is the core interface for the library
            management performed by <see cref="T:Juhta.Net.LibraryManagement.LibraryManager"/>.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.ILibraryHandle.LibraryFileName">
            <summary>
            Gets the file name of the library.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.ILibraryState">
            <summary>
            Defines a base interface for classes that represent the state of a library. Typically, a library state is an
            aggregate object containing a collection of reference-type or value-type objects created based on the
            configuration of the library.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IStartableLibrary">
            <summary>
            Defines an interface for startable libraries. A library is a startable library if it contains at least one
            process that has to be started prior to the library services can be used.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IStartableLibrary.StartProcesses">
            <summary>
            Starts the library processes.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IStartableLibrary.StopProcesses">
            <summary>
            Stops the library processes.
            </summary>
            <returns>Returns true if the library processes were stopped without errors, or false if at least one error
            occurred in the stopping process.</returns>
            <remarks>
            <para>This method should not throw exceptions. It is recommended that, in case of an error, the error is
            logged and the stopping process is continued for the rest of the processes. In other words, the method
            should stop the library processes as completely as possible.</para>
            <para>This method will be called even if the initialization process of the library has failed. This means
            that the method should prepare for such situation where the library processes have not been started at all
            or started only partially.</para>
            </remarks>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.IStartableLibraryState">
            <summary>
            Defines an interface for startable library states. A library state is a startable if it contains at least one
            process that has to be started prior to the library state services can be used.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IStartableLibraryState.StartProcesses">
            <summary>
            Starts the library state processes.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.IStartableLibraryState.StopProcesses">
            <summary>
            Stops the library state processes.
            </summary>
            <returns>Returns true if the library state processes were stopped without errors, or false if at least one
            error occurred in the stopping process.</returns>
            <remarks>
            <para>This method should not throw exceptions. It is recommended that, in case of an error, the error is
            logged and the stopping process is continued for the rest of the processes. In other words, the method
            should stop the library state processes as completely as possible.</para>
            <para>This method will be called even if the initialization process of the library state has failed. This
            means that the method should prepare for such situation where the library state processes have not been
            started at all or started only partially.</para>
            </remarks>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.LibraryHandleBase">
            <summary>
            Defines an abstract base class for library handle classes.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName">
            <summary>
            Gets the configuration file name of the library that this <see cref="T:Juhta.Net.LibraryManagement.LibraryHandleBase"/> instance
            represents.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName">
            <summary>
            See <see cref="P:Juhta.Net.LibraryManagement.ILibraryHandle.LibraryFileName"/>.
            </summary>
        </member>
        <member name="P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace">
            <summary>
            Gets the root namespace of the library that this <see cref="T:Juhta.Net.LibraryManagement.LibraryHandleBase"/> instance represents.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryHandleBase.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="libraryFileName">Specifies a value for the <see cref="P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName"/> property.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema">
            <summary>
            Gets the embedded schema for the common configuration.
            </summary>
            <returns>Returns the embedded schema for the common configuration.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets an embedded configuration schema plus the common configuration schema.
            </summary>
            <param name="containingAssembly">Specifies an assembly where the embedded configuration schema will be
            searched for.</param>
            <param name="configSchemaFileNamespace">Specifies the file namespace of an embedded configuration schema.</param>
            <param name="configSchemaFileName">Specifies the file name of an embedded configuration schema.</param>
            <returns>Returns an array containing two schemas, the specified embedded configuration schema and the
            common configuration schema.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets an embedded configuration schema.
            </summary>
            <param name="containingAssembly">Specifies an assembly where the embedded configuration schema will be
            searched for.</param>
            <param name="configSchemaFileNamespace">Specifies the file namespace of an embedded configuration schema.</param>
            <param name="configSchemaFileName">Specifies the file name of an embedded configuration schema.</param>
            <returns>Returns the embedded configuration schema from the specified assembly corresponding to the
            specified file namespace and name.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryHandleBase.CreateInstance(System.Xml.XmlNode)">
            <summary>
            Creates an instance of <see cref="T:Juhta.Net.LibraryManagement.ILibraryHandle"/> based on a specified library XML node.
            </summary>
            <param name="libraryNode">Specifies a library XML node.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.LibraryManagement.ILibraryHandle"/> instance.</returns>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryHandleBase.m_libraryFileName">
            <summary>
            Stores the <see cref="P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.LibraryInitializationException">
            <summary>
            This exception will be thrown when an error occurs in initialization of a library.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryInitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an inner exception that is the actual cause for the library
            initialization error.</param>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.LibraryManager">
            <summary>
            A class that represents a library manager. The library manager is responsible for managing the whole life cycle
            of libraries including initialization, dynamic configuration changes and closing.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.#ctor(Juhta.Net.Application)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="application">Specifies an <see cref="T:Juhta.Net.Application"/> object that will own the instance.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CloseLibraries">
            <summary>
            Closes all libraries.
            </summary>
            <remarks>
            <para>After this method has been called, libraries are no longer properly initialized.</para>
            <para>This method will be called by the framework manager when the framework is closed.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CreateDynamicLibraryContext``2">
            <summary>
            Creates an instance of <see cref="T:Juhta.Net.LibraryManagement.DynamicLibraryContext`2"/> corresponding to
            specified dynamic library type and library state type.
            </summary>
            <typeparam name="TDynamicLibrary">Specifies a dynamic library type.</typeparam>
            <typeparam name="TLibraryState">Specifies a library state type.</typeparam>
            <returns>Returns the created <see cref="T:Juhta.Net.LibraryManagement.DynamicLibraryContext`2"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.InitializeLibraries(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Initializes the libraries listed in a specified root configuration.
            </summary>
            <param name="rootConfig">Specifies an <see cref="T:System.Xml.XmlDocument"/> object containing the root configuration.</param>
            <param name="namespaceManager">Specifies an <see cref="T:System.Xml.XmlNamespaceManager"/> object for selecting nodes in
            <paramref name="rootConfig"/>.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.StartConfigFileWatching">
            <summary>
            Starts an asynchronous watching of configuration file changes.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.StopConfigFileWatching">
            <summary>
            Stops the asynchronous watching of configuration file changes.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.ChangeLibraryState(Juhta.Net.LibraryManagement.IDynamicLibrary,Juhta.Net.LibraryManagement.ILibraryState)">
            <summary>
            Changes the state of a specified dynamic library.
            </summary>
            <param name="library">Specifies a dynamic library.</param>
            <param name="newLibraryState">Specifies a new library state.</param>
            <returns>The return value true indicates a successful operation. The return value false means that the
            operation failed but the current library state was successfully restored as the effective library state.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.ClearLibraryCollections">
            <summary>
            Clears all library collections of the class.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CloseDynamicLibrary(Juhta.Net.LibraryManagement.IDynamicLibrary)">
            <summary>
            Closes a specified dynamic library.
            </summary>
            <param name="library"></param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CloseLibrary(Juhta.Net.LibraryManagement.ILibraryHandle)">
            <summary>
            Closes a specified non-dynamic library.
            </summary>
            <param name="libraryHandle">Specifies a library handle.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CloseLibraryState(Juhta.Net.LibraryManagement.ILibraryState,Juhta.Net.LibraryManagement.LibraryManager.LibraryStateInstanceType,System.String)">
            <summary>
            Closes a library state if necessary.
            </summary>
            <param name="libraryState">Specifies a library state. Can be null.</param>
            <param name="instanceType">Specifies the instance type of <paramref name="libraryState"/>.</param>
            <param name="libraryFileName">Specifies a library file name for error messages.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CreateDefaultLibraryState(Juhta.Net.LibraryManagement.IDynamicLibrary)">
            <summary>
            Creates the default library state for a specified dynamic library.
            </summary>
            <param name="library">Specifies a dynamic library.</param>
            <returns>Returns a library state object that holds the default state for the specified library.</returns>
            <remarks>The default library state will be returned as initialized.</remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CreateLibraryState(Juhta.Net.LibraryManagement.IDynamicCustomXmlConfigurableLibrary,System.String)">
            <summary>
            Creates an initialized library state for a dynamic custom XML configurable library based on an XML
            configuration file.
            </summary>
            <param name="library">Specifies a dynamic custom XML configurable library.</param>
            <param name="configFilePath">Specifies an XML configuration file path.</param>
            <returns>Returns the created and initialized <see cref="T:Juhta.Net.LibraryManagement.ILibraryState"/> object.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.CreateLibraryState(Juhta.Net.LibraryManagement.IDynamicLibrary,System.String)">
            <summary>
            Creates an initialized library state for a dynamic library based on a configuration file.
            </summary>
            <param name="library">Specifies a dynamic library.</param>
            <param name="configFilePath">Specifies a configuration file path.</param>
            <returns>Returns the created and initialized <see cref="T:Juhta.Net.LibraryManagement.ILibraryState"/> object.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.GetLibraryFileName(System.Object)">
            <summary>
            Gets the file name of a library specified by a library interface.
            </summary>
            <param name="libraryInterface">Specifies a library interface object.</param>
            <returns>Returns the file name of the library specified by the given library interface object.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.InitializeCustomXmlConfigurableLibrary(Juhta.Net.LibraryManagement.ICustomXmlConfigurableLibrary,System.String)">
            <summary>
            Initializes a custom XML configurable library based on an XML configuration.
            </summary>
            <param name="library">Specifies a custom XML configurable library.</param>
            <param name="configFilePath">Specifies an XML configuration file path.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.InitializeDynamicCustomXmlConfigurableLibrary(Juhta.Net.LibraryManagement.IDynamicCustomXmlConfigurableLibrary,System.String)">
            <summary>
            Initializes a dynamic custom XML configurable library based on an XML configuration.
            </summary>
            <param name="library">Specifies a dynamic custom XML configurable library.</param>
            <param name="configFilePath">Specifies an XML configuration file path.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.InitializeLibrary(Juhta.Net.LibraryManagement.ILibraryHandle)">
            <summary>
            Initializes the library specified by a library handle.
            </summary>
            <param name="libraryHandle">Specifies a library handle.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.IsLibraryInitialized(Juhta.Net.LibraryManagement.ILibraryHandle)">
            <summary>
            Checks whether the library specified by a library handle is already initialized.
            </summary>
            <param name="libraryHandle">Specifies a library handle.</param>
            <returns>Returns true if the library specified by the library handle is already initialized, otherwise
            false.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.LoadAndValidateXmlConfigFile(System.String,System.Xml.Schema.XmlSchema[],System.String)">
            <summary>
            Loads and validates an XML configuration file againts XML schemas.
            </summary>
            <param name="configFilePath">Specifies an XML configuration file path.</param>
            <param name="configSchemas">Specifies an array of XML schemas. Can be null in which case the validation
            will be ignored.</param>
            <param name="libraryFileName">Specifies the file name of a library to which the XML schemas relate.</param>
            <returns>Returns an <see cref="T:System.Xml.XmlDocument"/> object containing the validated XML configuration.</returns>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.OnConfigFileCreatedOrChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Defines a event handler that will be fired when a configuration file is changed or created.
            </summary>
            <param name="source">Specifies an event source.</param>
            <param name="e">Specifies event arguments.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.OnConfigFileDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Defines a event handler that will be fired when a configuration file is deleted.
            </summary>
            <param name="source">Specifies an event source.</param>
            <param name="e">Specifies event arguments.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.StartLibraryProcesses(Juhta.Net.LibraryManagement.ILibraryHandle)">
            <summary>
            Starts the processes of a specified non-dynamic library if necessary.
            </summary>
            <param name="libraryHandle">Specifies a library handle.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.StartLibraryStateProcesses(Juhta.Net.LibraryManagement.ILibraryState,Juhta.Net.LibraryManagement.LibraryManager.LibraryStateInstanceType,System.Boolean,System.String)">
            <summary>
            Starts the processes in a library state if necessary.
            </summary>
            <param name="libraryState">Specifies a library state.</param>
            <param name="instanceType">Specifies the instance type of <paramref name="libraryState"/>.</param>
            <param name="throwExceptions">Specifies whether to throw exceptions or not.</param>
            <param name="libraryFileName">Specifies a library file name for error messages.</param>
            <returns>Returns true if the operation succeeded, otherwise false.</returns>
            <remarks>The return value false is possible only if <paramref name="throwExceptions"/> is false.</remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.StopLibraryStateProcesses(Juhta.Net.LibraryManagement.ILibraryState,Juhta.Net.LibraryManagement.LibraryManager.LibraryStateInstanceType,System.Boolean,System.String)">
            <summary>
            Stops the processes in a library state if necessary.
            </summary>
            <param name="libraryState">Specifies a library state. Can be null.</param>
            <param name="instanceType">Specifies the instance type of <paramref name="libraryState"/>.</param>
            <param name="throwExceptions">Specifies whether to throw exceptions or not.</param>
            <param name="libraryFileName">Specifies a library file name for error messages.</param>
            <returns>Returns true if the operation succeeded, otherwise false.</returns>
            <remarks>The return value false is possible only if <paramref name="throwExceptions"/> is false.</remarks>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryManager.TryToRestoreCurrentLibraryState(Juhta.Net.LibraryManagement.IDynamicLibrary,Juhta.Net.LibraryManagement.ILibraryState,Juhta.Net.LibraryManagement.ILibraryState)">
            <summary>
            Tries to restore the current state to a specified dynamic library.
            </summary>
            <param name="library">Specifies a dynamic library.</param>
            <param name="currentLibraryState">Specifies the current library state.</param>
            <param name="newLibraryState">Specifies a new library state.</param>
            <returns>Returns true, if the restore operation was successful, otherwise false.</returns>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.LibraryManager.LibraryStateInstanceType">
            <summary>
            Defines an enumeration for the logical instance types of <see cref="T:Juhta.Net.LibraryManagement.ILibraryState"/> objects. These types
            are used in dynamic library state changes.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryManager.LibraryStateInstanceType.New">
            <summary>
            Represents a new state for a dynamic library.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryManager.LibraryStateInstanceType.Current">
            <summary>
            Represents the current state of a dynamic library.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryManager.m_application">
            <summary>
            Specifies the <see cref="T:Juhta.Net.Application"/> object that owns this <see cref="T:Juhta.Net.LibraryManagement.LibraryManager"/> instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryManager.m_configFileWatcher">
            <summary>
            A <see cref="T:Juhta.Net.LibraryManagement.ConfigFileWatcher"/> object that watches configuration file changes in the configuration
            directory.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryManager.m_dynamicLibrariesByConfigFileName">
            <summary>
            Specifies the collection of the dynamic libraries indexed by configuration file name.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryManager.m_dynamicLibrariesByType">
            <summary>
            Specifies the collection of the dynamic libraries indexed by type.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryManagement.LibraryManager.m_libraryHandles">
            <summary>
            Specifies the stack of the initialized libraries.
            </summary>
        </member>
        <member name="T:Juhta.Net.LibraryManagement.LibraryStateException">
            <summary>
            This exception will be thrown in case of library state related errors.
            </summary>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.LibraryManagement.LibraryStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an inner exception that is the actual cause for the library state
            error.</param>
        </member>
        <member name="T:Juhta.Net.LibraryMessages">
            <summary>
            A static class that defines the diagnostic messages for this library.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.MessageFactory">
            <summary>
            Gets the DiagnosticMessageFactory instance for creating diagnostic messages.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error001">
            <summary>
            Library '{0}' requires a configuration file '{1}' but there is no such file in the configuration directory
            '{2}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error002">
            <summary>
            XML configuration file '{0}' does not conform to the configuration schema(s) of the custom XML configurable
            library '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error003">
            <summary>
            Initialization of the library '{0}' failed.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error004">
            <summary>
            An unexpected error occurred when the library '{0}' was being closed.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Alert005">
            <summary>
            Library Manager detected changes in the configuration but failed to update the states of the associated
            dynamic libraries. The state of the process may be unstable. Please refer to the log events for more
            information.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error006">
            <summary>
            An error occurred when the application '{0}' was being started.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Alert007">
            <summary>
            Application '{0}' failed to start. Please refer to the log events for more information.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error008">
            <summary>
            Dynamic library context could not be created because no dynamic library was found with the type '{0}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error009">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error010">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning011">
            <summary>
            Library Manager detected that the configuration file '{0}' was deleted, but no actions were performed
            because there were no dynamic libraries associated with this configuration file.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Information012">
            <summary>
            Library Manager detected that the configuration file '{0}' was deleted, and the state of the associated
            dynamic library '{1}' was initialized successfully.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error013">
            <summary>
            Library Manager detected that the configuration file '{0}' was deleted, but an unexpected error occurred
            when the states of the associated dynamic libraries were being initialized. NOTE: The state of the process
            is currently unstable. You should restore the configuration file and possibly restart the process.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error014">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error015">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error016">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning017">
            <summary>
            At least one error occurred when the library '{0}' was closed. All resources and services of this library
            may not have been completely released or shutted down.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error018">
            <summary>
            An unexpected error occurred when the application '{0}' was being closed.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error019">
            <summary>
            An error occurred when a pending configuration file event was being created for the configuration file
            '{0}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning020">
            <summary>
            Dynamic configuration changes related to the configuration file '{0}' will probably not come into effect.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error021">
            <summary>
            An error occurred when a pending configuration file event related to the configuration file '{0}' was being
            raised.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error022">
            <summary>
            Library '{0}' does not exist in the directory '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning023">
            <summary>
            Library '{0}' has already been initialized. This library exists at least twice under the libraries XML node
            in the root library configuration. Please remove duplicate occurrences.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error024">
            <summary>
            Local assembly path has already been associated with this AssemblyClassUri instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error025">
            <summary>
            Value '{0}' is not a valid assembly class file URI.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error026">
            <summary>
            Assembly specified by the URI '{0}' has not been downloaded to the local machine.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error027">
            <summary>
            Consumer thread cannot consume the specified object because the instance has not been started.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error028">
            <summary>
            Consumer thread cannot consume the specified object because the internal worker thread has stopped due to
            an unexpected error.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error029">
            <summary>
            Local assembly path to be associated with an AssemblyClassUri instance must refer to an assembly on a fixed
            disk drive.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error030">
            <summary>
            Object cannot be created based on the URI '{0}' because the referenced assembly has not been downloaded to
            the local machine.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error031">
            <summary>
            Execution flow of the software reached a code branch that should never be reached (hint: {0}).
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error032">
            <summary>
            XML document cannot be validated because the target namespace '{0}' is not present in the schema collection
            of the XML validator.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error033">
            <summary>
            Name part cannot be empty in a command line option ('{0}'). The common syntax of command line options is
            &lt;prefix&gt;&lt;name&gt;[&lt;nameValueSeparator&gt;&lt;value&gt;].
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error034">
            <summary>
            Value part cannot be empty in a command line option ('{0}'). The common syntax of command line options is
            &lt;prefix&gt;&lt;name&gt;[&lt;nameValueSeparator&gt;&lt;value&gt;].
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error035">
            <summary>
            More than one mutually exclusive options from the option group '{0}' were found in the command line
            arguments.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error036">
            <summary>
            None of the options from the option group '{0}' were found in the command line arguments.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error037">
            <summary>
            Prefix '{0}' for command line options is not valid according to the regular expression pattern '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error038">
            <summary>
            Separator '{0}' for name and value parts in command line options is not valid according to the regular
            expression pattern '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error039">
            <summary>
            Command line option name '{0}' is not valid according to the regular expression pattern '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error040">
            <summary>
            Default option's name was not found in the option group '{0}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error041">
            <summary>
            Default option's name must be '{0}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error042">
            <summary>
            Option '{0}' was specified more than once in the command line arguments.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error043">
            <summary>
            Option '{0}' was not found in the command line arguments.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error044">
            <summary>
            Command line argument '{0}' has no value part.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error045">
            <summary>
            Command line argument '{0}' is invalid according to the given validator.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error046">
            <summary>
            Command line argument '{0}' is invalid according to the regular expression '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error047">
            <summary>
            Command line argument value '{0}' is invalid according to the given validator.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error048">
            <summary>
            Command line argument value '{0}' is invalid according to the regular expression '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error049">
            <summary>
            Command line argument '{0}' is unexpected.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error050">
            <summary>
            There are no command line parameters to be consumed.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error051">
            <summary>
            Regular expression pattern cannot be null.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error052">
            <summary>
            Value '{0}' is not a valid finnish social security number.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error053">
            <summary>
            Value '{0}' is invalid according to the regular expression pattern '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error054">
            <summary>
            File '{0}' could not be locked within {1} milliseconds.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error055">
            <summary>
            Range between positions {0} - {1} in the file '{2}' could not be locked within {3} milliseconds.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error056">
            <summary>
            Library Manager detected that the configuration file '{0}' was deleted, but the state of the associated
            dynamic library '{1}' could not be initialized. The state of the library was left unmodified.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error057">
            <summary>
            Library Manager detected that the configuration file '{0}' was deleted, but the state of the associated
            dynamic library '{1}' could not be initialized. NOTE: The state of the library is currently unstable. You
            should restore the configuration file and possibly restart the process.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error058">
            <summary>
            Default library state could not be created because the library '{0}' does not support the required
            interface ('{1}').
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error059">
            <summary>
            Processes in the {0} state of the library '{1}' could not be completely stopped.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error060">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error061">
            <summary>
            Processes in the {0} state of the library '{1}' could not be started.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error062">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning063">
            <summary>
            Library Manager detected that the configuration file '{0}' was created or changed, but no actions were
            performed because there were no dynamic libraries associated with this configuration file.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error064">
            <summary>
            Library Manager detected that the configuration file '{0}' was created or changed, but the state of the
            associated dynamic library '{1}' could not be updated. The state of the library was left unmodified.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Information065">
            <summary>
            Library Manager detected that the configuration file '{0}' was created or changed, and the state of the
            associated dynamic library '{1}' was updated successfully.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error066">
            <summary>
            Library Manager detected that the configuration file '{0}' was created or changed, but the state of the
            associated dynamic library '{1}' could not be updated. NOTE: The state of the library is currently
            unstable. You should restore the configuration file and possibly restart the process.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error067">
            <summary>
            Library Manager detected that the configuration file '{0}' was created or changed, but an unexpected error
            occurred when the states of the associated dynamic libraries were being updated. NOTE: The state of the
            process is currently unstable. You should restore the configuration file and possibly restart the process.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error068">
            <summary>
            Library state cannot be created for the library '{0}', because the library doesn't implement any of the
            required dynamic library interfaces.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error069">
            <summary>
            Library '{0}' cannot be initialized based on the configuration file '{1}', because the library doesn't
            implement any of the required configurable library interfaces.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error070">
            <summary>
            Processes of the library '{0}' could not be started.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error071">
            <summary>
            An unexpected error occurred when the processes of the library '{0}' were being stopped.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning072">
            <summary>
            At least one error occurred when the processes of the library '{0}' were being stopped. All resources and
            services of these processes may not have been completely released or shutted down.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning073">
            <summary>
            At least one error occurred when the processes in the {0} state of the library '{1}' were being stopped.
            All resources and services of these processes may not have been completely released or shutted down.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error074">
            <summary>
            Free for the future use.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error075">
            <summary>
            An unexpected error occurred when the processes in the {0} state of the library '{1}' were being stopped.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning076">
            <summary>
            At least one error occurred when the {0} state of the library '{1}' was closed. All resources and services
            of this library may not have been completely released or shutted down.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error077">
            <summary>
            An unexpected error occurred when the {0} state of the library '{1}' was being closed.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning078">
            <summary>
            Library Manager detected that the configuration file '{0}' was created or changed but the state of the
            associated dynamic library '{1}' could not be updated. NOTE: The library continues running with the current
            state.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Warning079">
            <summary>
            Library Manager detected that the configuration file '{0}' was deleted but the state of the associated
            dynamic library '{1}' could not be initialized. NOTE: The library continues running with the current state.
            </summary>
        </member>
        <member name="T:Juhta.Net.Logger">
            <summary>
            Defines a static wrapper class for enabling easy logging through the encapsulated <see cref="T:Juhta.Net.Common.ILogger"/>
            instance.
            </summary>
            <remarks>
            <para>This class is also capable for serializing concurrent access to non-thread-safe <see cref="T:Juhta.Net.Common.ILogger"/>
            instances. In other words, this class is thread-safe excluding the <see cref="M:Juhta.Net.Logger.SetLogger(Juhta.Net.Common.ILogger)"/> method.</para>
            <para>All exceptions thrown by the underlying <see cref="T:Juhta.Net.Common.ILogger"/> instance will be caught without handling,
            so no exceptions will be thrown by the class.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.Logger.#cctor">
            <summary>
            Initializes the class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogAlert(Juhta.Net.Common.AlertMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(Juhta.Net.Common.AlertMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogAlert(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(System.String)"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Juhta.Net.Logger.LogAlert(Juhta.Net.Common.AlertMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(Juhta.Net.Common.AlertMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogAlert(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogAlert(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(Juhta.Net.Common.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(Juhta.Net.Common.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(System.Exception)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(Juhta.Net.Common.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(Juhta.Net.Common.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(System.Exception,System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,Juhta.Net.Common.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogError(System.Exception,System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogEvent(Juhta.Net.Common.DiagnosticMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogEvent(Juhta.Net.Common.DiagnosticMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogEvent(Juhta.Net.Common.DiagnosticMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogEvent(Juhta.Net.Common.DiagnosticMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogInformation(Juhta.Net.Common.InformationMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(Juhta.Net.Common.InformationMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogInformation(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogInformation(Juhta.Net.Common.InformationMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(Juhta.Net.Common.InformationMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogInformation(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogInformation(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogWarning(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogWarning(Juhta.Net.Common.WarningMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(Juhta.Net.Common.WarningMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogWarning(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.LogWarning(Juhta.Net.Common.WarningMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Common.ILogger.LogWarning(Juhta.Net.Common.WarningMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Logger.SetLogger(Juhta.Net.Common.ILogger)">
            <summary>
            Sets an <see cref="T:Juhta.Net.Common.ILogger"/> instance into the class.
            </summary>
            <param name="logger">Specifies an <see cref="T:Juhta.Net.Common.ILogger"/> object.</param>
        </member>
        <member name="F:Juhta.Net.Logger.s_logger">
            <summary>
            Specifies the encapsulated <see cref="T:Juhta.Net.Common.ILogger"/> instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Logger.s_syncLock">
            <summary>
            Specifies a synchronization object for serializing access to non-thread-safe logger instances.
            </summary>
        </member>
        <member name="T:Juhta.Net.Validation.IStringValidator">
            <summary>
            Defines an interface for string value validators.
            </summary>
        </member>
        <member name="T:Juhta.Net.Validation.IValidator`1">
            <summary>
            Defines a generic interface for validators.
            </summary>
            <typeparam name="T">Specifies the type of values to validate.</typeparam>
        </member>
        <member name="M:Juhta.Net.Validation.IValidator`1.Validate(`0)">
            <summary>
            Validates a specified value. If the specified value doesn't pass validation, the method must throw an
            instance of <see cref="T:Juhta.Net.Validation.ValidationException"/>.
            </summary>
            <param name="value">Specifies a value to validate.</param>
        </member>
        <member name="T:Juhta.Net.Validation.RegexValidator">
            <summary>
            Defines a validator class that can validate string values based on a regular expression.
            </summary>
        </member>
        <member name="M:Juhta.Net.Validation.RegexValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="pattern">Specifies a regular expression pattern.</param>
        </member>
        <member name="M:Juhta.Net.Validation.RegexValidator.#ctor(System.String,Juhta.Net.Common.ErrorMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="pattern">Specifies a regular expression pattern.</param>
            <param name="errorMessage">Specifies an error message to use in validation errors.</param>
        </member>
        <member name="M:Juhta.Net.Validation.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="pattern">Specifies a regular expression pattern.</param>
            <param name="options">Specifies a bitwise combination of regular expression options.</param>
        </member>
        <member name="M:Juhta.Net.Validation.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,Juhta.Net.Common.ErrorMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="pattern">Specifies a regular expression pattern.</param>
            <param name="options">Specifies a bitwise combination of regular expression options.</param>
            <param name="errorMessage">Specifies an error message to use in validation errors.</param>
        </member>
        <member name="M:Juhta.Net.Validation.RegexValidator.Validate(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Validation.IValidator`1.Validate(`0)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Validation.RegexValidator.#ctor(System.String[],System.Text.RegularExpressions.RegexOptions,Juhta.Net.Validation.RegexValidator.PatternMatchMode,Juhta.Net.Common.ErrorMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="patterns">Specifies an array of regular expression patterns.</param>
            <param name="options">Specifies a bitwise combination of regular expression options.</param>
            <param name="patternMatchMode">Specifies a pattern match mode determining how many of the specified regular
            expression patterns must match for a successful validation.</param>
            <param name="errorMessage">Specifies an error message to use in validation errors. The message can contain
            a placeholder for a value to validate.</param>
        </member>
        <member name="T:Juhta.Net.Validation.RegexValidator.PatternMatchMode">
            <summary>
            Defines an enumeration for the pattern match modes.
            </summary>
        </member>
        <member name="F:Juhta.Net.Validation.RegexValidator.PatternMatchMode.And">
            <summary>
            All associated regular expressions must match for a succesful validation.
            </summary>
        </member>
        <member name="F:Juhta.Net.Validation.RegexValidator.PatternMatchMode.Or">
            <summary>
            At least one associated regular expression must match for a succesful validation.
            </summary>
        </member>
        <member name="F:Juhta.Net.Validation.RegexValidator.PatternMatchMode.Xor">
            <summary>
            Exactly one associated regular expression must match for a succesful validation.
            </summary>
        </member>
        <member name="F:Juhta.Net.Validation.RegexValidator.m_errorMessage">
            <summary>
            Specifies the error message to use in validation errors. The message can contain a placeholder for a value
            to validate. Can be null.
            </summary>
        </member>
        <member name="F:Juhta.Net.Validation.RegexValidator.m_options">
            <summary>
            Specifies a combination of the regular expression options to control validation operations.
            </summary>
        </member>
        <member name="F:Juhta.Net.Validation.RegexValidator.m_patternMatchMode">
            <summary>
            Specifies the pattern match mode determining how many of the associated regular expression patterns must
            match for a successful validation.
            </summary>
        </member>
        <member name="F:Juhta.Net.Validation.RegexValidator.m_patterns">
            <summary>
            Specifies a list of the regular expression patterns associated with this RegexValidator instance.
            </summary>
        </member>
        <member name="T:Juhta.Net.Validation.ValidationException">
            <summary>
            This exception will be thrown by instances of the <see cref="T:Juhta.Net.Validation.IValidator`1"/> interface when they
            encounter invalid data.
            </summary>
        </member>
        <member name="M:Juhta.Net.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
    </members>
</doc>
