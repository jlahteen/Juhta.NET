### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Extensions.XmlNodeExtensions
  commentId: T:Juhta.Net.Extensions.XmlNodeExtensions
  id: XmlNodeExtensions
  parent: Juhta.Net.Extensions
  children:
  - Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String)
  - Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String)
  - Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String)
  - Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String[],System.String[])
  - Juhta.Net.Extensions.XmlNodeExtensions.CopyTo(System.Xml.XmlNode,System.Xml.XmlNode)
  - Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String)
  - Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)
  - Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute(System.Xml.XmlNode,System.String)
  - Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)
  - Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
  - Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray(System.Xml.XmlNode)
  langs:
  - csharp
  - vb
  name: XmlNodeExtensions
  nameWithType: XmlNodeExtensions
  fullName: Juhta.Net.Extensions.XmlNodeExtensions
  type: Class
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: XmlNodeExtensions
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 17
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nA static class that contains extension methods for the <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public static class XmlNodeExtensions
    content.vb: Public Module XmlNodeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String)
  id: AppendChild(System.Xml.XmlNode,System.String)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: AppendChild(XmlNode, String)
  nameWithType: XmlNodeExtensions.AppendChild(XmlNode, String)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode, System.String)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: AppendChild
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 27
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nAppends a child node to the current node.\n"
  example: []
  syntax:
    content: public static XmlNode AppendChild(this XmlNode node, string childName)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: childName
      type: System.String
      description: Specifies a name for the child node.
    return:
      type: System.Xml.XmlNode
      description: Returns the appended child node.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendChild(node As XmlNode, childName As String) As XmlNode
  overload: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String)
  id: AppendChild(System.Xml.XmlNode,System.String,System.String)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: AppendChild(XmlNode, String, String)
  nameWithType: XmlNodeExtensions.AppendChild(XmlNode, String, String)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode, System.String, System.String)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: AppendChild
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 39
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nAppends a child node to the current node.\n"
  example: []
  syntax:
    content: public static XmlNode AppendChild(this XmlNode node, string childName, string childInnerText)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: childName
      type: System.String
      description: Specifies a name for the child node.
    - id: childInnerText
      type: System.String
      description: Specifies an inner text for the child node.
    return:
      type: System.Xml.XmlNode
      description: Returns the appended child node.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendChild(node As XmlNode, childName As String, childInnerText As String) As XmlNode
  overload: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String)
  id: AppendChild(System.Xml.XmlNode,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: AppendChild(XmlNode, String, String, String)
  nameWithType: XmlNodeExtensions.AppendChild(XmlNode, String, String, String)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: AppendChild
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 52
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nAppends a child node to the current node.\n"
  example: []
  syntax:
    content: public static XmlNode AppendChild(this XmlNode node, string qualifiedChildName, string namespaceUri, string innerText)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: qualifiedChildName
      type: System.String
      description: Specifies a qualified name for the child node.
    - id: namespaceUri
      type: System.String
      description: Specifies a namespace URI for the child node.
    - id: innerText
      type: System.String
      description: Specifies an inner text for the child node. Can be null.
    return:
      type: System.Xml.XmlNode
      description: Returns the appended child node.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendChild(node As XmlNode, qualifiedChildName As String, namespaceUri As String, innerText As String) As XmlNode
  overload: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String[],System.String[])
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String[],System.String[])
  id: AppendChild(System.Xml.XmlNode,System.String,System.String,System.String[],System.String[])
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: AppendChild(XmlNode, String, String, String[], String[])
  nameWithType: XmlNodeExtensions.AppendChild(XmlNode, String, String, String[], String[])
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode, System.String, System.String, System.String[], System.String[])
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: AppendChild
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 77
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nAppends a child node to the current node.\n"
  remarks: >-
    The lengths of the arrays <code data-dev-comment-type="paramref" class="paramref">attributeNames</code> and <code data-dev-comment-type="paramref" class="paramref">attributeValues</code>

    must match.
  example: []
  syntax:
    content: public static XmlNode AppendChild(this XmlNode node, string childName, string childInnerText, string[] attributeNames, string[] attributeValues)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: childName
      type: System.String
      description: Specifies a name for the child node.
    - id: childInnerText
      type: System.String
      description: Specifies an inner text for the child node. Can be null.
    - id: attributeNames
      type: System.String[]
      description: >-
        A string array specifying names for the attributes to be added to the child

        node. Can be null.
    - id: attributeValues
      type: System.String[]
      description: >-
        A string array specifying values for the attributes to be added to the child

        node. This parameter will be ignored if <code data-dev-comment-type="paramref" class="paramref">attributeNames</code> is null.
    return:
      type: System.Xml.XmlNode
      description: Returns the appended child node.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendChild(node As XmlNode, childName As String, childInnerText As String, attributeNames As String(), attributeValues As String()) As XmlNode
  overload: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild*
  nameWithType.vb: XmlNodeExtensions.AppendChild(XmlNode, String, String, String(), String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode, System.String, System.String, System.String(), System.String())
  name.vb: AppendChild(XmlNode, String, String, String(), String())
- uid: Juhta.Net.Extensions.XmlNodeExtensions.CopyTo(System.Xml.XmlNode,System.Xml.XmlNode)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.CopyTo(System.Xml.XmlNode,System.Xml.XmlNode)
  id: CopyTo(System.Xml.XmlNode,System.Xml.XmlNode)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: CopyTo(XmlNode, XmlNode)
  nameWithType: XmlNodeExtensions.CopyTo(XmlNode, XmlNode)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.CopyTo(System.Xml.XmlNode, System.Xml.XmlNode)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CopyTo
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 116
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nCopies the current node to another node.\n"
  remarks: Copying covers all attributes and child nodes.
  example: []
  syntax:
    content: public static void CopyTo(this XmlNode node, XmlNode destination)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: destination
      type: System.Xml.XmlNode
      description: Specifies a destination node.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyTo(node As XmlNode, destination As XmlNode)
  overload: Juhta.Net.Extensions.XmlNodeExtensions.CopyTo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String)
  id: GetAttribute(System.Xml.XmlNode,System.String)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: GetAttribute(XmlNode, String)
  nameWithType: XmlNodeExtensions.GetAttribute(XmlNode, String)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode, System.String)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: GetAttribute
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 132
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nGets an attribute value from the current node.\n"
  example: []
  syntax:
    content: public static string GetAttribute(this XmlNode node, string name)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: name
      type: System.String
      description: Specifies an attribute name.
    return:
      type: System.String
      description: Returns the value of the specified attribute or an empty string, if the attribute wasn&apos;t found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAttribute(node As XmlNode, name As String) As String
  overload: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)
  id: GetAttribute(System.Xml.XmlNode,System.String,System.String)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: GetAttribute(XmlNode, String, String)
  nameWithType: XmlNodeExtensions.GetAttribute(XmlNode, String, String)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode, System.String, System.String)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: GetAttribute
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 149
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nGets an attribute value from the current node.\n"
  example: []
  syntax:
    content: public static string GetAttribute(this XmlNode node, string name, string defaultValue)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: name
      type: System.String
      description: Specifies an attribute name.
    - id: defaultValue
      type: System.String
      description: Specifies a default value for the attribute.
    return:
      type: System.String
      description: Returns the value of the specified attribute or the default value, if the attribute wasn&apos;t found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAttribute(node As XmlNode, name As String, defaultValue As String) As String
  overload: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute(System.Xml.XmlNode,System.String)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute(System.Xml.XmlNode,System.String)
  id: HasAttribute(System.Xml.XmlNode,System.String)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: HasAttribute(XmlNode, String)
  nameWithType: XmlNodeExtensions.HasAttribute(XmlNode, String)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute(System.Xml.XmlNode, System.String)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: HasAttribute
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 163
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nChecks whether the current node has a specified attribute.\n"
  example: []
  syntax:
    content: public static bool HasAttribute(this XmlNode node, string name)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: name
      type: System.String
      description: Specifies an attribute name.
    return:
      type: System.Boolean
      description: Returns true if the current node has the specified attribute, otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAttribute(node As XmlNode, name As String) As Boolean
  overload: Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)
  id: SetAttribute(System.Xml.XmlNode,System.String,System.String)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: SetAttribute(XmlNode, String, String)
  nameWithType: XmlNodeExtensions.SetAttribute(XmlNode, String, String)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode, System.String, System.String)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: SetAttribute
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 175
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nSets an attribute to the current node.\n"
  remarks: If the attribute already exists the function just updates its value.
  example: []
  syntax:
    content: public static void SetAttribute(this XmlNode node, string name, string value)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current node.
    - id: name
      type: System.String
      description: Specifies a name for the attribute to be set.
    - id: value
      type: System.String
      description: Specifies a value for the attribute to be set.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetAttribute(node As XmlNode, name As String, value As String)
  overload: Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
  id: ToBuiltInTypeObject(System.Xml.XmlNode)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: ToBuiltInTypeObject(XmlNode)
  nameWithType: XmlNodeExtensions.ToBuiltInTypeObject(XmlNode)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: ToBuiltInTypeObject
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 196
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nConverts this XmlNode instance to a built-in type object based on its type and value attributes that are\nassumed to exist in the node.\n"
  example: []
  syntax:
    content: public static object ToBuiltInTypeObject(this XmlNode node)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current XmlNode instance.
    return:
      type: System.Object
      description: Returns the built-in type object, that is, the result of the conversion.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBuiltInTypeObject(node As XmlNode) As Object
  overload: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray(System.Xml.XmlNode)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray(System.Xml.XmlNode)
  id: ToBuiltInTypeObjectArray(System.Xml.XmlNode)
  isExtensionMethod: true
  parent: Juhta.Net.Extensions.XmlNodeExtensions
  langs:
  - csharp
  - vb
  name: ToBuiltInTypeObjectArray(XmlNode)
  nameWithType: XmlNodeExtensions.ToBuiltInTypeObjectArray(XmlNode)
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray(System.Xml.XmlNode)
  type: Method
  source:
    remote:
      path: Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: ToBuiltInTypeObjectArray
    path: ../../Juhta.NET/Source/Juhta.Net/Extensions/XmlNodeExtensions.cs
    startLine: 307
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Extensions
  summary: "\nConverts the child nodes of this XmlNode instance to an array of built-in type objects.\n"
  example: []
  syntax:
    content: public static object[] ToBuiltInTypeObjectArray(this XmlNode node)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: Specifies the current XmlNode instance.
    return:
      type: System.Object[]
      description: Returns an array of the built-in type objects, that is, the result of the conversion.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBuiltInTypeObjectArray(node As XmlNode) As Object()
  overload: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray*
  seealso:
  - linkId: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
    commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  parent: System.Xml
  isExternal: true
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: Juhta.Net.Extensions
  commentId: N:Juhta.Net.Extensions
  isExternal: false
  name: Juhta.Net.Extensions
  nameWithType: Juhta.Net.Extensions
  fullName: Juhta.Net.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild*
  commentId: Overload:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild
  isExternal: false
  name: AppendChild
  nameWithType: XmlNodeExtensions.AppendChild
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.AppendChild
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Juhta.Net.Extensions.XmlNodeExtensions.CopyTo*
  commentId: Overload:Juhta.Net.Extensions.XmlNodeExtensions.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: XmlNodeExtensions.CopyTo
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.CopyTo
- uid: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute*
  commentId: Overload:Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute
  isExternal: false
  name: GetAttribute
  nameWithType: XmlNodeExtensions.GetAttribute
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute
- uid: Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute*
  commentId: Overload:Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute
  isExternal: false
  name: HasAttribute
  nameWithType: XmlNodeExtensions.HasAttribute
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute*
  commentId: Overload:Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute
  isExternal: false
  name: SetAttribute
  nameWithType: XmlNodeExtensions.SetAttribute
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute
- uid: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject*
  commentId: Overload:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject
  isExternal: false
  name: ToBuiltInTypeObject
  nameWithType: XmlNodeExtensions.ToBuiltInTypeObject
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject
- uid: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
  commentId: M:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObject(System.Xml.XmlNode)
- uid: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray*
  commentId: Overload:Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray
  isExternal: false
  name: ToBuiltInTypeObjectArray
  nameWithType: XmlNodeExtensions.ToBuiltInTypeObjectArray
  fullName: Juhta.Net.Extensions.XmlNodeExtensions.ToBuiltInTypeObjectArray
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
