### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Services.ServiceFactory
  commentId: T:Juhta.Net.Services.ServiceFactory
  id: ServiceFactory
  parent: Juhta.Net.Services
  children:
  - Juhta.Net.Services.ServiceFactory.CreateService``1
  - Juhta.Net.Services.ServiceFactory.CreateService``1(Juhta.Net.Services.ServiceId)
  - Juhta.Net.Services.ServiceFactory.CreateService``1(System.String)
  - Juhta.Net.Services.ServiceFactory.CreateService``1(System.String,System.String)
  - Juhta.Net.Services.ServiceFactory.Services
  langs:
  - csharp
  - vb
  name: ServiceFactory
  nameWithType: ServiceFactory
  fullName: Juhta.Net.Services.ServiceFactory
  type: Class
  source:
    remote:
      path: src/Juhta.Net/Services/ServiceFactory.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: ServiceFactory
    path: ../src/Juhta.Net/Services/ServiceFactory.cs
    startLine: 18
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Services
  summary: "\nDefines a class that provides methods for getting metadata and creating instances of the configured dependency\ninjection services.\n"
  example: []
  syntax:
    content: 'public class ServiceFactory : Singleton<ServiceFactory>'
    content.vb: >-
      Public Class ServiceFactory

          Inherits Singleton(Of ServiceFactory)
  inheritance:
  - System.Object
  - Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}
  inheritedMembers:
  - Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.Instance
  - Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.ResetSingletonInstance
  - Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.SetSingletonInstance(Juhta.Net.Services.ServiceFactory)
  - Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.s_instance
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Juhta.Net.Services.ServiceFactory.CreateService``1
  commentId: M:Juhta.Net.Services.ServiceFactory.CreateService``1
  id: CreateService``1
  parent: Juhta.Net.Services.ServiceFactory
  langs:
  - csharp
  - vb
  name: CreateService<TService>()
  nameWithType: ServiceFactory.CreateService<TService>()
  fullName: Juhta.Net.Services.ServiceFactory.CreateService<TService>()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Services/ServiceFactory.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: CreateService
    path: ../src/Juhta.Net/Services/ServiceFactory.cs
    startLine: 27
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Services
  summary: "\nCreates an instance of a dependency injection service corresponding to a specified service type.\n"
  example: []
  syntax:
    content: 'public TService CreateService<TService>()where TService : class'
    typeParameters:
    - id: TService
      description: Specifies a service type.
    return:
      type: '{TService}'
      description: Returns the created instance casted to the specified service type.
    content.vb: Public Function CreateService(Of TService As Class) As TService
  overload: Juhta.Net.Services.ServiceFactory.CreateService*
  nameWithType.vb: ServiceFactory.CreateService(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Juhta.Net.Services.ServiceFactory.CreateService(Of TService)()
  name.vb: CreateService(Of TService)()
- uid: Juhta.Net.Services.ServiceFactory.CreateService``1(Juhta.Net.Services.ServiceId)
  commentId: M:Juhta.Net.Services.ServiceFactory.CreateService``1(Juhta.Net.Services.ServiceId)
  id: CreateService``1(Juhta.Net.Services.ServiceId)
  parent: Juhta.Net.Services.ServiceFactory
  langs:
  - csharp
  - vb
  name: CreateService<TService>(ServiceId)
  nameWithType: ServiceFactory.CreateService<TService>(ServiceId)
  fullName: Juhta.Net.Services.ServiceFactory.CreateService<TService>(Juhta.Net.Services.ServiceId)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Services/ServiceFactory.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: CreateService
    path: ../src/Juhta.Net/Services/ServiceFactory.cs
    startLine: 38
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Services
  summary: "\nCreates an instance of a dependency injection service corresponding to a specified service identifier.\n"
  example: []
  syntax:
    content: 'public TService CreateService<TService>(ServiceId serviceId)where TService : class'
    parameters:
    - id: serviceId
      type: Juhta.Net.Services.ServiceId
      description: Specifies a service identifier.
    typeParameters:
    - id: TService
      description: Specifies a service type.
    return:
      type: '{TService}'
      description: Returns the created instance casted to the specified service type.
    content.vb: Public Function CreateService(Of TService As Class)(serviceId As ServiceId) As TService
  overload: Juhta.Net.Services.ServiceFactory.CreateService*
  nameWithType.vb: ServiceFactory.CreateService(Of TService)(ServiceId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Juhta.Net.Services.ServiceFactory.CreateService(Of TService)(Juhta.Net.Services.ServiceId)
  name.vb: CreateService(Of TService)(ServiceId)
- uid: Juhta.Net.Services.ServiceFactory.CreateService``1(System.String)
  commentId: M:Juhta.Net.Services.ServiceFactory.CreateService``1(System.String)
  id: CreateService``1(System.String)
  parent: Juhta.Net.Services.ServiceFactory
  langs:
  - csharp
  - vb
  name: CreateService<TService>(String)
  nameWithType: ServiceFactory.CreateService<TService>(String)
  fullName: Juhta.Net.Services.ServiceFactory.CreateService<TService>(System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Services/ServiceFactory.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: CreateService
    path: ../src/Juhta.Net/Services/ServiceFactory.cs
    startLine: 54
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Services
  summary: "\nCreates an instance of a dependency injection service corresponding to a specified service name.\n"
  example: []
  syntax:
    content: 'public TService CreateService<TService>(string serviceName)where TService : class'
    parameters:
    - id: serviceName
      type: System.String
      description: Specifies a service name.
    typeParameters:
    - id: TService
      description: Specifies a service type.
    return:
      type: '{TService}'
      description: Returns the created instance casted to the specified service type.
    content.vb: Public Function CreateService(Of TService As Class)(serviceName As String) As TService
  overload: Juhta.Net.Services.ServiceFactory.CreateService*
  nameWithType.vb: ServiceFactory.CreateService(Of TService)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Juhta.Net.Services.ServiceFactory.CreateService(Of TService)(System.String)
  name.vb: CreateService(Of TService)(String)
- uid: Juhta.Net.Services.ServiceFactory.CreateService``1(System.String,System.String)
  commentId: M:Juhta.Net.Services.ServiceFactory.CreateService``1(System.String,System.String)
  id: CreateService``1(System.String,System.String)
  parent: Juhta.Net.Services.ServiceFactory
  langs:
  - csharp
  - vb
  name: CreateService<TService>(String, String)
  nameWithType: ServiceFactory.CreateService<TService>(String, String)
  fullName: Juhta.Net.Services.ServiceFactory.CreateService<TService>(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Services/ServiceFactory.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: CreateService
    path: ../src/Juhta.Net/Services/ServiceFactory.cs
    startLine: 67
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Services
  summary: "\nCreates an instance of a dependency injection service corresponding to a specified service identifier\nscheme and specifier.\n"
  example: []
  syntax:
    content: 'public TService CreateService<TService>(string serviceIdScheme, string serviceIdSpecifier)where TService : class'
    parameters:
    - id: serviceIdScheme
      type: System.String
      description: Specifies a service identifier scheme.
    - id: serviceIdSpecifier
      type: System.String
      description: Specifies a service identifier specifier.
    typeParameters:
    - id: TService
      description: Specifies a service type.
    return:
      type: '{TService}'
      description: Returns the created instance casted to the specified service type.
    content.vb: Public Function CreateService(Of TService As Class)(serviceIdScheme As String, serviceIdSpecifier As String) As TService
  overload: Juhta.Net.Services.ServiceFactory.CreateService*
  nameWithType.vb: ServiceFactory.CreateService(Of TService)(String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Juhta.Net.Services.ServiceFactory.CreateService(Of TService)(System.String, System.String)
  name.vb: CreateService(Of TService)(String, String)
- uid: Juhta.Net.Services.ServiceFactory.Services
  commentId: P:Juhta.Net.Services.ServiceFactory.Services
  id: Services
  parent: Juhta.Net.Services.ServiceFactory
  langs:
  - csharp
  - vb
  name: Services
  nameWithType: ServiceFactory.Services
  fullName: Juhta.Net.Services.ServiceFactory.Services
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Services/ServiceFactory.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: Services
    path: ../src/Juhta.Net/Services/ServiceFactory.cs
    startLine: 80
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Services
  summary: "\nGets an array of the <xref href=\"Juhta.Net.Services.Service\" data-throw-if-not-resolved=\"false\"></xref> instances created based on the configuration. The array is empty\nif there are no configured dependency injection services.\n"
  example: []
  syntax:
    content: public Service[] Services { get; }
    parameters: []
    return:
      type: Juhta.Net.Services.Service[]
    content.vb: Public ReadOnly Property Services As Service()
  overload: Juhta.Net.Services.ServiceFactory.Services*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Juhta.Net.Services
  commentId: N:Juhta.Net.Services
  isExternal: false
  name: Juhta.Net.Services
  nameWithType: Juhta.Net.Services
  fullName: Juhta.Net.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}
  commentId: T:Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}
  parent: Juhta.Net.Common
  definition: Juhta.Net.Common.Singleton`1
  name: Singleton<ServiceFactory>
  nameWithType: Singleton<ServiceFactory>
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Services.ServiceFactory>
  nameWithType.vb: Singleton(Of ServiceFactory)
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Services.ServiceFactory)
  name.vb: Singleton(Of ServiceFactory)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: <
    nameWithType: <
    fullName: <
  - uid: Juhta.Net.Services.ServiceFactory
    name: ServiceFactory
    nameWithType: ServiceFactory
    fullName: Juhta.Net.Services.ServiceFactory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Juhta.Net.Services.ServiceFactory
    name: ServiceFactory
    nameWithType: ServiceFactory
    fullName: Juhta.Net.Services.ServiceFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.Instance
  commentId: P:Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.Instance
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}
  definition: Juhta.Net.Common.Singleton`1.Instance
  name: Instance
  nameWithType: Singleton<ServiceFactory>.Instance
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Services.ServiceFactory>.Instance
  nameWithType.vb: Singleton(Of ServiceFactory).Instance
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Services.ServiceFactory).Instance
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.ResetSingletonInstance
  commentId: M:Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.ResetSingletonInstance
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}
  definition: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
  name: ResetSingletonInstance()
  nameWithType: Singleton<ServiceFactory>.ResetSingletonInstance()
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Services.ServiceFactory>.ResetSingletonInstance()
  nameWithType.vb: Singleton(Of ServiceFactory).ResetSingletonInstance()
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Services.ServiceFactory).ResetSingletonInstance()
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton<ServiceFactory>.ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<Juhta.Net.Services.ServiceFactory>.ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton(Of ServiceFactory).ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of Juhta.Net.Services.ServiceFactory).ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.SetSingletonInstance(Juhta.Net.Services.ServiceFactory)
  commentId: M:Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.SetSingletonInstance(Juhta.Net.Services.ServiceFactory)
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}
  definition: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
  name: SetSingletonInstance(ServiceFactory)
  nameWithType: Singleton<ServiceFactory>.SetSingletonInstance(ServiceFactory)
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Services.ServiceFactory>.SetSingletonInstance(Juhta.Net.Services.ServiceFactory)
  nameWithType.vb: Singleton(Of ServiceFactory).SetSingletonInstance(ServiceFactory)
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Services.ServiceFactory).SetSingletonInstance(Juhta.Net.Services.ServiceFactory)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton<ServiceFactory>.SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<Juhta.Net.Services.ServiceFactory>.SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Juhta.Net.Services.ServiceFactory
    name: ServiceFactory
    nameWithType: ServiceFactory
    fullName: Juhta.Net.Services.ServiceFactory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton(Of ServiceFactory).SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of Juhta.Net.Services.ServiceFactory).SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Juhta.Net.Services.ServiceFactory
    name: ServiceFactory
    nameWithType: ServiceFactory
    fullName: Juhta.Net.Services.ServiceFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.s_instance
  commentId: F:Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}.s_instance
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Services.ServiceFactory}
  definition: Juhta.Net.Common.Singleton`1.s_instance
  name: s_instance
  nameWithType: Singleton<ServiceFactory>.s_instance
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Services.ServiceFactory>.s_instance
  nameWithType.vb: Singleton(Of ServiceFactory).s_instance
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Services.ServiceFactory).s_instance
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.Common.Singleton`1
  commentId: T:Juhta.Net.Common.Singleton`1
  isExternal: false
  name: Singleton<T>
  nameWithType: Singleton<T>
  fullName: Juhta.Net.Common.Singleton<T>
  nameWithType.vb: Singleton(Of T)
  fullName.vb: Juhta.Net.Common.Singleton(Of T)
  name.vb: Singleton(Of T)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common
  commentId: N:Juhta.Net.Common
  isExternal: false
  name: Juhta.Net.Common
  nameWithType: Juhta.Net.Common
  fullName: Juhta.Net.Common
- uid: Juhta.Net.Common.Singleton`1.Instance
  commentId: P:Juhta.Net.Common.Singleton`1.Instance
  isExternal: false
  name: Instance
  nameWithType: Singleton<T>.Instance
  fullName: Juhta.Net.Common.Singleton<T>.Instance
  nameWithType.vb: Singleton(Of T).Instance
  fullName.vb: Juhta.Net.Common.Singleton(Of T).Instance
- uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
  commentId: M:Juhta.Net.Common.Singleton`1.ResetSingletonInstance
  isExternal: false
  name: ResetSingletonInstance()
  nameWithType: Singleton<T>.ResetSingletonInstance()
  fullName: Juhta.Net.Common.Singleton<T>.ResetSingletonInstance()
  nameWithType.vb: Singleton(Of T).ResetSingletonInstance()
  fullName.vb: Juhta.Net.Common.Singleton(Of T).ResetSingletonInstance()
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton<T>.ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<T>.ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton(Of T).ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of T).ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
  commentId: M:Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
  isExternal: false
  name: SetSingletonInstance(T)
  nameWithType: Singleton<T>.SetSingletonInstance(T)
  fullName: Juhta.Net.Common.Singleton<T>.SetSingletonInstance(T)
  nameWithType.vb: Singleton(Of T).SetSingletonInstance(T)
  fullName.vb: Juhta.Net.Common.Singleton(Of T).SetSingletonInstance(T)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton<T>.SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<T>.SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton(Of T).SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of T).SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton`1.s_instance
  commentId: F:Juhta.Net.Common.Singleton`1.s_instance
  isExternal: false
  name: s_instance
  nameWithType: Singleton<T>.s_instance
  fullName: Juhta.Net.Common.Singleton<T>.s_instance
  nameWithType.vb: Singleton(Of T).s_instance
  fullName.vb: Juhta.Net.Common.Singleton(Of T).s_instance
- uid: Juhta.Net.Services.ServiceFactory.CreateService*
  commentId: Overload:Juhta.Net.Services.ServiceFactory.CreateService
  isExternal: false
  name: CreateService
  nameWithType: ServiceFactory.CreateService
  fullName: Juhta.Net.Services.ServiceFactory.CreateService
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  isExternal: false
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Juhta.Net.Services.ServiceId
  commentId: T:Juhta.Net.Services.ServiceId
  parent: Juhta.Net.Services
  isExternal: false
  name: ServiceId
  nameWithType: ServiceId
  fullName: Juhta.Net.Services.ServiceId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Juhta.Net.Services.Service
  commentId: T:Juhta.Net.Services.Service
  isExternal: false
  name: Service
  nameWithType: Service
  fullName: Juhta.Net.Services.Service
- uid: Juhta.Net.Services.ServiceFactory.Services*
  commentId: Overload:Juhta.Net.Services.ServiceFactory.Services
  isExternal: false
  name: Services
  nameWithType: ServiceFactory.Services
  fullName: Juhta.Net.Services.ServiceFactory.Services
- uid: Juhta.Net.Services.Service[]
  name: Service[]
  nameWithType: Service[]
  fullName: Juhta.Net.Services.Service[]
  nameWithType.vb: Service()
  fullName.vb: Juhta.Net.Services.Service()
  name.vb: Service()
  spec.csharp:
  - uid: Juhta.Net.Services.Service
    name: Service
    nameWithType: Service
    fullName: Juhta.Net.Services.Service
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Juhta.Net.Services.Service
    name: Service
    nameWithType: Service
    fullName: Juhta.Net.Services.Service
  - name: ()
    nameWithType: ()
    fullName: ()
