### YamlMime:ManagedReference
items:
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  commentId: T:Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  id: DynamicLibraryContext`2
  parent: Juhta.Net.LibraryManagement
  children:
  - Juhta.Net.LibraryManagement.DynamicLibraryContext`2.Dispose
  - Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary
  - Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState
  langs:
  - csharp
  - vb
  name: DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  type: Class
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: DynamicLibraryContext
    path: ../src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
    startLine: 21
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nDefines a class that simplifies the implementation of dynamic library services. The class acquires a read-lock\nto the state of the dynamic library and provides access both to the handle and state of the library. In other\nwords, the class saves a developer of a dynamic library from storing the instances of the current handle and\nstate within the library.\n"
  example: []
  syntax:
    content: 'public class DynamicLibraryContext<TDynamicLibrary, TLibraryState> : IDisposable where TDynamicLibrary : IDynamicLibrary where TLibraryState : ILibraryState'
    typeParameters:
    - id: TDynamicLibrary
      description: Specifies a dynamic library type.
    - id: TLibraryState
      description: Specifies a library state type.
    content.vb: >-
      Public Class DynamicLibraryContext(Of TDynamicLibrary As IDynamicLibrary, TLibraryState As ILibraryState)
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  name.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.Dispose
  commentId: M:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.Dispose
  id: Dispose
  parent: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>.Dispose()
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>.Dispose()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: Dispose
    path: ../src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
    startLine: 30
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nDisposes the instance, that is, releases the acquired read-lock to the state of the library.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).Dispose()
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary
  commentId: P:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary
  id: DynamicLibrary
  parent: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  langs:
  - csharp
  - vb
  name: DynamicLibrary
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>.DynamicLibrary
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>.DynamicLibrary
  type: Property
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: DynamicLibrary
    path: ../src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
    startLine: 45
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nGets the dynamic library instance.\n"
  example: []
  syntax:
    content: public TDynamicLibrary DynamicLibrary { get; }
    parameters: []
    return:
      type: '{TDynamicLibrary}'
    content.vb: Public ReadOnly Property DynamicLibrary As TDynamicLibrary
  overload: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary*
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).DynamicLibrary
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).DynamicLibrary
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState
  commentId: P:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState
  id: LibraryState
  parent: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  langs:
  - csharp
  - vb
  name: LibraryState
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>.LibraryState
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>.LibraryState
  type: Property
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: LibraryState
    path: ../src/Juhta.Net/LibraryManagement/DynamicLibraryContext.cs
    startLine: 59
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nGets the library state instance.\n"
  example: []
  syntax:
    content: public TLibraryState LibraryState { get; }
    parameters: []
    return:
      type: '{TLibraryState}'
    content.vb: Public ReadOnly Property LibraryState As TLibraryState
  overload: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState*
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).LibraryState
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).LibraryState
references:
- uid: Juhta.Net.LibraryManagement
  commentId: N:Juhta.Net.LibraryManagement
  isExternal: false
  name: Juhta.Net.LibraryManagement
  nameWithType: Juhta.Net.LibraryManagement
  fullName: Juhta.Net.LibraryManagement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.Dispose*
  commentId: Overload:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.Dispose
  isExternal: false
  name: Dispose
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>.Dispose
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>.Dispose
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).Dispose
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary*
  commentId: Overload:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.DynamicLibrary
  isExternal: false
  name: DynamicLibrary
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>.DynamicLibrary
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>.DynamicLibrary
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).DynamicLibrary
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).DynamicLibrary
- uid: '{TDynamicLibrary}'
  commentId: '!:TDynamicLibrary'
  definition: TDynamicLibrary
  name: TDynamicLibrary
  nameWithType: TDynamicLibrary
  fullName: TDynamicLibrary
- uid: TDynamicLibrary
  commentId: '!:TDynamicLibrary'
  isExternal: false
  name: TDynamicLibrary
  nameWithType: TDynamicLibrary
  fullName: TDynamicLibrary
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState*
  commentId: Overload:Juhta.Net.LibraryManagement.DynamicLibraryContext`2.LibraryState
  isExternal: false
  name: LibraryState
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>.LibraryState
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>.LibraryState
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).LibraryState
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState).LibraryState
- uid: '{TLibraryState}'
  commentId: '!:TLibraryState'
  definition: TLibraryState
  name: TLibraryState
  nameWithType: TLibraryState
  fullName: TLibraryState
- uid: TLibraryState
  commentId: '!:TLibraryState'
  isExternal: false
  name: TLibraryState
  nameWithType: TLibraryState
  fullName: TLibraryState
