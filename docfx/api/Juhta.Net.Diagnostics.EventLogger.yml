### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Diagnostics.EventLogger
  commentId: T:Juhta.Net.Diagnostics.EventLogger
  id: EventLogger
  parent: Juhta.Net.Diagnostics
  children:
  - Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)
  - Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String)
  - Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)
  - Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogError(System.Exception)
  - Juhta.Net.Diagnostics.EventLogger.LogError(System.String)
  - Juhta.Net.Diagnostics.EventLogger.LogError(System.String,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)
  - Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)
  - Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String)
  - Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)
  - Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])
  - Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String)
  - Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: EventLogger
  nameWithType: EventLogger
  fullName: Juhta.Net.Diagnostics.EventLogger
  type: Class
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: EventLogger
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 18
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nDefines a static event logger class that provides services for diagnostic event logging.\n"
  example: []
  syntax:
    content: public static class EventLogger
    content.vb: Public Module EventLogger
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)
  id: LogAlert(Juhta.Net.Diagnostics.AlertMessage)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogAlert(AlertMessage)
  nameWithType: EventLogger.LogAlert(AlertMessage)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogAlert
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 26
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an alert event.\n"
  example: []
  syntax:
    content: public static void LogAlert(AlertMessage message)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.AlertMessage
      description: Specifies an AlertMessage object.
    content.vb: Public Shared Sub LogAlert(message As AlertMessage)
  overload: Juhta.Net.Diagnostics.EventLogger.LogAlert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String)
  id: LogAlert(System.String)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogAlert(String)
  nameWithType: EventLogger.LogAlert(String)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogAlert
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 35
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an alert event.\n"
  example: []
  syntax:
    content: public static void LogAlert(string message)
    parameters:
    - id: message
      type: System.String
      description: Specifies an event message.
    content.vb: Public Shared Sub LogAlert(message As String)
  overload: Juhta.Net.Diagnostics.EventLogger.LogAlert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])
  id: LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogAlert(AlertMessage, Object[])
  nameWithType: EventLogger.LogAlert(AlertMessage, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogAlert
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 47
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an alert event.\n"
  example: []
  syntax:
    content: public static void LogAlert(AlertMessage message, params object[] args)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.AlertMessage
      description: >-
        Specifies an AlertMessage object whose Message property contains zero or more format

        items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in the Message property of <code data-dev-comment-type="paramref" class="paramref">message</code>.
    content.vb: Public Shared Sub LogAlert(message As AlertMessage, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogAlert*
  nameWithType.vb: EventLogger.LogAlert(AlertMessage, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage, System.Object())
  name.vb: LogAlert(AlertMessage, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String,System.Object[])
  id: LogAlert(System.String,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogAlert(String, Object[])
  nameWithType: EventLogger.LogAlert(String, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogAlert
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 58
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an alert event.\n"
  example: []
  syntax:
    content: public static void LogAlert(string messageFormat, params object[] args)
    parameters:
    - id: messageFormat
      type: System.String
      description: Specifies an event message format containing zero or more format items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in <code data-dev-comment-type="paramref" class="paramref">messageFormat</code>.
    content.vb: Public Shared Sub LogAlert(messageFormat As String, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogAlert*
  nameWithType.vb: EventLogger.LogAlert(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogAlert(System.String, System.Object())
  name.vb: LogAlert(String, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)
  id: LogError(Juhta.Net.Diagnostics.ErrorMessage)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogError(ErrorMessage)
  nameWithType: EventLogger.LogError(ErrorMessage)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogError
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 67
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an error event.\n"
  example: []
  syntax:
    content: public static void LogError(ErrorMessage message)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.ErrorMessage
      description: Specifies an ErrorMessage object.
    content.vb: Public Shared Sub LogError(message As ErrorMessage)
  overload: Juhta.Net.Diagnostics.EventLogger.LogError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogError(System.Exception)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogError(System.Exception)
  id: LogError(System.Exception)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogError(Exception)
  nameWithType: EventLogger.LogError(Exception)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogError(System.Exception)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogError
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 77
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an error event.\n"
  example: []
  syntax:
    content: public static void LogError(Exception exception)
    parameters:
    - id: exception
      type: System.Exception
      description: >-
        Specifies an Exception object whose string representation determines the event

        message.
    content.vb: Public Shared Sub LogError(exception As Exception)
  overload: Juhta.Net.Diagnostics.EventLogger.LogError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogError(System.String)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogError(System.String)
  id: LogError(System.String)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogError(String)
  nameWithType: EventLogger.LogError(String)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogError(System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogError
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 86
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an error event.\n"
  example: []
  syntax:
    content: public static void LogError(string message)
    parameters:
    - id: message
      type: System.String
      description: Specifies an event message.
    content.vb: Public Shared Sub LogError(message As String)
  overload: Juhta.Net.Diagnostics.EventLogger.LogError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])
  id: LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogError(ErrorMessage, Object[])
  nameWithType: EventLogger.LogError(ErrorMessage, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogError
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 98
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an error event.\n"
  example: []
  syntax:
    content: public static void LogError(ErrorMessage message, params object[] args)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.ErrorMessage
      description: >-
        Specifies an ErrorMessage object whose Message property contains zero or more format

        items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in the Message property of <code data-dev-comment-type="paramref" class="paramref">message</code>.
    content.vb: Public Shared Sub LogError(message As ErrorMessage, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogError*
  nameWithType.vb: EventLogger.LogError(ErrorMessage, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage, System.Object())
  name.vb: LogError(ErrorMessage, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogError(System.String,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogError(System.String,System.Object[])
  id: LogError(System.String,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogError(String, Object[])
  nameWithType: EventLogger.LogError(String, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogError(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogError
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 109
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an error event.\n"
  example: []
  syntax:
    content: public static void LogError(string messageFormat, params object[] args)
    parameters:
    - id: messageFormat
      type: System.String
      description: Specifies an event message format containing zero or more format items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in <code data-dev-comment-type="paramref" class="paramref">messageFormat</code>.
    content.vb: Public Shared Sub LogError(messageFormat As String, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogError*
  nameWithType.vb: EventLogger.LogError(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogError(System.String, System.Object())
  name.vb: LogError(String, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)
  id: LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogEvent(DiagnosticMessage)
  nameWithType: EventLogger.LogEvent(DiagnosticMessage)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogEvent
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 118
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs a diagnostic event.\n"
  example: []
  syntax:
    content: public static void LogEvent(DiagnosticMessage message)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.DiagnosticMessage
      description: Specifies a DiagnosticMessage object.
    content.vb: Public Shared Sub LogEvent(message As DiagnosticMessage)
  overload: Juhta.Net.Diagnostics.EventLogger.LogEvent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])
  id: LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogEvent(DiagnosticMessage, Object[])
  nameWithType: EventLogger.LogEvent(DiagnosticMessage, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogEvent
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 130
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs a diagnostic event.\n"
  example: []
  syntax:
    content: public static void LogEvent(DiagnosticMessage message, params object[] args)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.DiagnosticMessage
      description: >-
        Specifies a DiagnosticMessage object whose Message property contains zero or more

        format items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in the Message property of <code data-dev-comment-type="paramref" class="paramref">message</code>.
    content.vb: Public Shared Sub LogEvent(message As DiagnosticMessage, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogEvent*
  nameWithType.vb: EventLogger.LogEvent(DiagnosticMessage, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage, System.Object())
  name.vb: LogEvent(DiagnosticMessage, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)
  id: LogInformation(Juhta.Net.Diagnostics.InformationMessage)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogInformation(InformationMessage)
  nameWithType: EventLogger.LogInformation(InformationMessage)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogInformation
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 139
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an information event.\n"
  example: []
  syntax:
    content: public static void LogInformation(InformationMessage message)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.InformationMessage
      description: Specifies an InformationMessage object.
    content.vb: Public Shared Sub LogInformation(message As InformationMessage)
  overload: Juhta.Net.Diagnostics.EventLogger.LogInformation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String)
  id: LogInformation(System.String)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogInformation(String)
  nameWithType: EventLogger.LogInformation(String)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogInformation
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 148
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an information event.\n"
  example: []
  syntax:
    content: public static void LogInformation(string message)
    parameters:
    - id: message
      type: System.String
      description: Specifies an event message.
    content.vb: Public Shared Sub LogInformation(message As String)
  overload: Juhta.Net.Diagnostics.EventLogger.LogInformation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])
  id: LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogInformation(InformationMessage, Object[])
  nameWithType: EventLogger.LogInformation(InformationMessage, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogInformation
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 160
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an information event.\n"
  example: []
  syntax:
    content: public static void LogInformation(InformationMessage message, params object[] args)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.InformationMessage
      description: >-
        Specifies an InformationMessage object whose Message property contains zero or more

        format items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in the Message property of <code data-dev-comment-type="paramref" class="paramref">message</code>.
    content.vb: Public Shared Sub LogInformation(message As InformationMessage, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogInformation*
  nameWithType.vb: EventLogger.LogInformation(InformationMessage, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage, System.Object())
  name.vb: LogInformation(InformationMessage, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String,System.Object[])
  id: LogInformation(System.String,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogInformation(String, Object[])
  nameWithType: EventLogger.LogInformation(String, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogInformation
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 171
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs an information event.\n"
  example: []
  syntax:
    content: public static void LogInformation(string messageFormat, params object[] args)
    parameters:
    - id: messageFormat
      type: System.String
      description: Specifies an event message format containing zero or more format items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in <code data-dev-comment-type="paramref" class="paramref">messageFormat</code>.
    content.vb: Public Shared Sub LogInformation(messageFormat As String, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogInformation*
  nameWithType.vb: EventLogger.LogInformation(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogInformation(System.String, System.Object())
  name.vb: LogInformation(String, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String)
  id: LogWarning(System.String)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogWarning(String)
  nameWithType: EventLogger.LogWarning(String)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogWarning
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 180
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs a warning event.\n"
  example: []
  syntax:
    content: public static void LogWarning(string message)
    parameters:
    - id: message
      type: System.String
      description: Specifies an event message.
    content.vb: Public Shared Sub LogWarning(message As String)
  overload: Juhta.Net.Diagnostics.EventLogger.LogWarning*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)
  id: LogWarning(Juhta.Net.Diagnostics.WarningMessage)
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogWarning(WarningMessage)
  nameWithType: EventLogger.LogWarning(WarningMessage)
  fullName: Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogWarning
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 189
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs a warning event.\n"
  example: []
  syntax:
    content: public static void LogWarning(WarningMessage message)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.WarningMessage
      description: Specifies a WarningMessage object.
    content.vb: Public Shared Sub LogWarning(message As WarningMessage)
  overload: Juhta.Net.Diagnostics.EventLogger.LogWarning*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String,System.Object[])
  id: LogWarning(System.String,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogWarning(String, Object[])
  nameWithType: EventLogger.LogWarning(String, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogWarning
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 200
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs a warning event.\n"
  example: []
  syntax:
    content: public static void LogWarning(string messageFormat, params object[] args)
    parameters:
    - id: messageFormat
      type: System.String
      description: Specifies an event message format containing zero or more format items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in <code data-dev-comment-type="paramref" class="paramref">messageFormat</code>.
    content.vb: Public Shared Sub LogWarning(messageFormat As String, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogWarning*
  nameWithType.vb: EventLogger.LogWarning(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogWarning(System.String, System.Object())
  name.vb: LogWarning(String, Object())
- uid: Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])
  commentId: M:Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])
  id: LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])
  parent: Juhta.Net.Diagnostics.EventLogger
  langs:
  - csharp
  - vb
  name: LogWarning(WarningMessage, Object[])
  nameWithType: EventLogger.LogWarning(WarningMessage, Object[])
  fullName: Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net.Diagnostics/EventLogger.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LogWarning
    path: ../src/Juhta.Net.Diagnostics/EventLogger.cs
    startLine: 212
  assemblies:
  - Juhta.Net.Diagnostics
  namespace: Juhta.Net.Diagnostics
  summary: "\nLogs a warning event.\n"
  example: []
  syntax:
    content: public static void LogWarning(WarningMessage message, params object[] args)
    parameters:
    - id: message
      type: Juhta.Net.Diagnostics.WarningMessage
      description: >-
        Specifies a WarningMessage object whose Message property contains zero or more format

        items.
    - id: args
      type: System.Object[]
      description: >-
        Specifies an object array containing zero or more objects to format. These objects must

        correspond to the format items in the Message property of <code data-dev-comment-type="paramref" class="paramref">message</code>.
    content.vb: Public Shared Sub LogWarning(message As WarningMessage, ParamArray args As Object())
  overload: Juhta.Net.Diagnostics.EventLogger.LogWarning*
  nameWithType.vb: EventLogger.LogWarning(WarningMessage, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.EventLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage, System.Object())
  name.vb: LogWarning(WarningMessage, Object())
references:
- uid: Juhta.Net.Diagnostics
  commentId: N:Juhta.Net.Diagnostics
  isExternal: false
  name: Juhta.Net.Diagnostics
  nameWithType: Juhta.Net.Diagnostics
  fullName: Juhta.Net.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.Diagnostics.EventLogger.LogAlert*
  commentId: Overload:Juhta.Net.Diagnostics.EventLogger.LogAlert
  isExternal: false
  name: LogAlert
  nameWithType: EventLogger.LogAlert
  fullName: Juhta.Net.Diagnostics.EventLogger.LogAlert
- uid: Juhta.Net.Diagnostics.AlertMessage
  commentId: T:Juhta.Net.Diagnostics.AlertMessage
  parent: Juhta.Net.Diagnostics
  isExternal: false
  name: AlertMessage
  nameWithType: AlertMessage
  fullName: Juhta.Net.Diagnostics.AlertMessage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Juhta.Net.Diagnostics.EventLogger.LogError*
  commentId: Overload:Juhta.Net.Diagnostics.EventLogger.LogError
  isExternal: false
  name: LogError
  nameWithType: EventLogger.LogError
  fullName: Juhta.Net.Diagnostics.EventLogger.LogError
- uid: Juhta.Net.Diagnostics.ErrorMessage
  commentId: T:Juhta.Net.Diagnostics.ErrorMessage
  parent: Juhta.Net.Diagnostics
  isExternal: false
  name: ErrorMessage
  nameWithType: ErrorMessage
  fullName: Juhta.Net.Diagnostics.ErrorMessage
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Juhta.Net.Diagnostics.EventLogger.LogEvent*
  commentId: Overload:Juhta.Net.Diagnostics.EventLogger.LogEvent
  isExternal: false
  name: LogEvent
  nameWithType: EventLogger.LogEvent
  fullName: Juhta.Net.Diagnostics.EventLogger.LogEvent
- uid: Juhta.Net.Diagnostics.DiagnosticMessage
  commentId: T:Juhta.Net.Diagnostics.DiagnosticMessage
  parent: Juhta.Net.Diagnostics
  isExternal: false
  name: DiagnosticMessage
  nameWithType: DiagnosticMessage
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage
- uid: Juhta.Net.Diagnostics.EventLogger.LogInformation*
  commentId: Overload:Juhta.Net.Diagnostics.EventLogger.LogInformation
  isExternal: false
  name: LogInformation
  nameWithType: EventLogger.LogInformation
  fullName: Juhta.Net.Diagnostics.EventLogger.LogInformation
- uid: Juhta.Net.Diagnostics.InformationMessage
  commentId: T:Juhta.Net.Diagnostics.InformationMessage
  parent: Juhta.Net.Diagnostics
  isExternal: false
  name: InformationMessage
  nameWithType: InformationMessage
  fullName: Juhta.Net.Diagnostics.InformationMessage
- uid: Juhta.Net.Diagnostics.EventLogger.LogWarning*
  commentId: Overload:Juhta.Net.Diagnostics.EventLogger.LogWarning
  isExternal: false
  name: LogWarning
  nameWithType: EventLogger.LogWarning
  fullName: Juhta.Net.Diagnostics.EventLogger.LogWarning
- uid: Juhta.Net.Diagnostics.WarningMessage
  commentId: T:Juhta.Net.Diagnostics.WarningMessage
  parent: Juhta.Net.Diagnostics
  isExternal: false
  name: WarningMessage
  nameWithType: WarningMessage
  fullName: Juhta.Net.Diagnostics.WarningMessage
