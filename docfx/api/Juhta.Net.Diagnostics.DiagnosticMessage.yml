### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Diagnostics.DiagnosticMessage
  commentId: T:Juhta.Net.Diagnostics.DiagnosticMessage
  id: DiagnosticMessage
  parent: Juhta.Net.Diagnostics
  children:
  - Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String)
  - Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String,System.String)
  - Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
  - Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  - Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  - Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage
  - Juhta.Net.Diagnostics.DiagnosticMessage.Id
  - Juhta.Net.Diagnostics.DiagnosticMessage.Message
  - Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.Exception,System.String@)
  - Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.String,System.String@)
  - Juhta.Net.Diagnostics.DiagnosticMessage.Type
  langs:
  - csharp
  - vb
  name: DiagnosticMessage
  nameWithType: DiagnosticMessage
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage
  type: Class
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: DiagnosticMessage
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 17
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nDefines an abstract base class for diagnostic messages. Diagnostic messages make it possible not to write long\nmessages inside the actual code but centralize them in better manageable separate contexts.\n"
  example: []
  syntax:
    content: public abstract class DiagnosticMessage
    content.vb: Public MustInherit Class DiagnosticMessage
  inheritance:
  - System.Object
  derivedClasses:
  - Juhta.Net.Diagnostics.AlertMessage
  - Juhta.Net.Diagnostics.ErrorMessage
  - Juhta.Net.Diagnostics.InformationMessage
  - Juhta.Net.Diagnostics.WarningMessage
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
  id: FormatMessage(System.Object[])
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: FormatMessage(Object[])
  nameWithType: DiagnosticMessage.FormatMessage(Object[])
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: FormatMessage
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 28
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nFormats the message stored in this DiagnosticMessage instance with specified objects.\n"
  example: []
  syntax:
    content: public string FormatMessage(params object[] args)
    parameters:
    - id: args
      type: System.Object[]
      description: Specifies an array of objects to format. Can be null.
    return:
      type: System.String
      description: >-
        Returns the formatted message. If the specified object array doesn&apos;t match the format items in the

        message stored in this DiagnosticMessage instance, the method just returns the message without any

        formatting.
    content.vb: Public Function FormatMessage(ParamArray args As Object()) As String
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage*
  nameWithType.vb: DiagnosticMessage.FormatMessage(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object())
  name.vb: FormatMessage(Object())
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  id: GetIntegerId
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: GetIntegerId()
  nameWithType: DiagnosticMessage.GetIntegerId()
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: GetIntegerId
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 60
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nGets an integer identifier out of the <xref href=\"Juhta.Net.Diagnostics.DiagnosticMessage.Id\" data-throw-if-not-resolved=\"false\"></xref> property of this DiagnosticMessage instance.\n"
  example: []
  syntax:
    content: public int GetIntegerId()
    return:
      type: System.Int32
      description: >-
        Returns the greatest whole number fragment in the <xref href="Juhta.Net.Diagnostics.DiagnosticMessage.Id" data-throw-if-not-resolved="false"></xref> property of this

        DiagnosticMessage instance as an integer. If there are no whole number fragments in the <xref href="Juhta.Net.Diagnostics.DiagnosticMessage.Id" data-throw-if-not-resolved="false"></xref>

        property, the return value is zero.
    content.vb: Public Function GetIntegerId As Integer
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId*
  seealso:
  - linkId: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
    commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  id: GetIntegerId(System.String)
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: GetIntegerId(String)
  nameWithType: DiagnosticMessage.GetIntegerId(String)
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: GetIntegerId
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 72
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nGets an integer identifier out of a specified string identifier.\n"
  example: []
  syntax:
    content: public static int GetIntegerId(string id)
    parameters:
    - id: id
      type: System.String
      description: Specifies a string identifier.
    return:
      type: System.Int32
      description: >-
        Returns the greatest whole number fragment in the specified string identifier as an integer. If

        there are no whole number fragments in the string identifier, the return value is zero.
    content.vb: Public Shared Function GetIntegerId(id As String) As Integer
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId*
  seealso:
  - linkId: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
    commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage
  id: GetMessage
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: GetMessage()
  nameWithType: DiagnosticMessage.GetMessage()
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: GetMessage
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 105
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nGets the message stored in this DiagnosticMessage instance without any formatting.\n"
  remarks: Use this method instead of <xref href="Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object%5b%5d)" data-throw-if-not-resolved="false"></xref> when the message contains no format items.
  example: []
  syntax:
    content: public string GetMessage()
    return:
      type: System.String
      description: Returns the stored message without any formatting.
    content.vb: Public Function GetMessage As String
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.Exception,System.String@)
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.Exception,System.String@)
  id: TryGetMessageId(System.Exception,System.String@)
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: TryGetMessageId(Exception, out String)
  nameWithType: DiagnosticMessage.TryGetMessageId(Exception, out String)
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.Exception, out System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: TryGetMessageId
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 125
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nTries to get an identifier for the message of a specified exception.\n"
  remarks: "\n<p>If the specified exception contains inner exceptions, the innermost exception with a found identifier\nmatch is decisive (root cause exception).</p>\n<p>Searching will be done in the last formatted messages for the current thread.</p>\n"
  example: []
  syntax:
    content: public static bool TryGetMessageId(Exception exception, out string messageId)
    parameters:
    - id: exception
      type: System.Exception
      description: Specifies an exception.
    - id: messageId
      type: System.String
      description: >-
        If the function returns true, returns the identifier of the message of the

        specified exception, otherwise returns null.
    return:
      type: System.Boolean
      description: >-
        Returns true if an identifier was found for the message of the specified exception, otherwise

        returns false.
    content.vb: Public Shared Function TryGetMessageId(exception As Exception, ByRef messageId As String) As Boolean
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId*
  nameWithType.vb: DiagnosticMessage.TryGetMessageId(Exception, ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.Exception, ByRef System.String)
  name.vb: TryGetMessageId(Exception, ByRef String)
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.String,System.String@)
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.String,System.String@)
  id: TryGetMessageId(System.String,System.String@)
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: TryGetMessageId(String, out String)
  nameWithType: DiagnosticMessage.TryGetMessageId(String, out String)
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: TryGetMessageId
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 150
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nTries to get an identifier for a specified message.\n"
  remarks: Searching will be done in the last formatted messages for the current thread.
  example: []
  syntax:
    content: public static bool TryGetMessageId(string message, out string messageId)
    parameters:
    - id: message
      type: System.String
      description: Specifies a message.
    - id: messageId
      type: System.String
      description: >-
        If the function returns true, returns the identifier of the specified message,

        otherwise returns null.
    return:
      type: System.Boolean
      description: Returns true if an identifier was found for the specified message, otherwise returns false.
    content.vb: Public Shared Function TryGetMessageId(message As String, ByRef messageId As String) As Boolean
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId*
  nameWithType.vb: DiagnosticMessage.TryGetMessageId(String, ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.String, ByRef System.String)
  name.vb: TryGetMessageId(String, ByRef String)
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Id
  commentId: P:Juhta.Net.Diagnostics.DiagnosticMessage.Id
  id: Id
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: DiagnosticMessage.Id
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Id
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: Id
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 175
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nGets the identifier of the diagnostic message that this DiagnosticMessage instance represents.\n"
  example: []
  syntax:
    content: public string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Id As String
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Message
  commentId: P:Juhta.Net.Diagnostics.DiagnosticMessage.Message
  id: Message
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: DiagnosticMessage.Message
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Message
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: Message
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 184
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nGets the message associated with this DiagnosticMessage instance.\n"
  remarks: The value can contain format items.
  example: []
  syntax:
    content: public string Message { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Message As String
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.Message*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Type
  commentId: P:Juhta.Net.Diagnostics.DiagnosticMessage.Type
  id: Type
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: DiagnosticMessage.Type
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Type
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: Type
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 192
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nGets the type of the diagnostic message that this DiagnosticMessage instance represents.\n"
  example: []
  syntax:
    content: public DiagnosticMessageType Type { get; }
    parameters: []
    return:
      type: Juhta.Net.Diagnostics.DiagnosticMessageType
    content.vb: Public ReadOnly Property Type As DiagnosticMessageType
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String)
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String)
  id: '#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String)'
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: DiagnosticMessage(DiagnosticMessageType, String)
  nameWithType: DiagnosticMessage.DiagnosticMessage(DiagnosticMessageType, String)
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.DiagnosticMessage(Juhta.Net.Diagnostics.DiagnosticMessageType, System.String)
  type: Constructor
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: .ctor
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 207
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nInitializes a new instance.\n"
  example: []
  syntax:
    content: protected DiagnosticMessage(DiagnosticMessageType type, string message)
    parameters:
    - id: type
      type: Juhta.Net.Diagnostics.DiagnosticMessageType
      description: Specifies a value for the <xref href="Juhta.Net.Diagnostics.DiagnosticMessage.Type" data-throw-if-not-resolved="false"></xref> property.
    - id: message
      type: System.String
      description: >-
        Specifies a message that will be associated with the instance. The value can contain

        format items.
    content.vb: Protected Sub New(type As DiagnosticMessageType, message As String)
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String,System.String)
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String,System.String)
  id: '#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String,System.String)'
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  langs:
  - csharp
  - vb
  name: DiagnosticMessage(DiagnosticMessageType, String, String)
  nameWithType: DiagnosticMessage.DiagnosticMessage(DiagnosticMessageType, String, String)
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.DiagnosticMessage(Juhta.Net.Diagnostics.DiagnosticMessageType, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
      branch: release/v1.0.0
      repo: https://github.com/jlahteen/juhta.net.git
    id: .ctor
    path: ../src/Juhta.Net/Diagnostics/DiagnosticMessage.cs
    startLine: 217
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Diagnostics
  summary: "\nInitializes a new instance.\n"
  example: []
  syntax:
    content: protected DiagnosticMessage(DiagnosticMessageType type, string message, string id)
    parameters:
    - id: type
      type: Juhta.Net.Diagnostics.DiagnosticMessageType
      description: Specifies a value for the <xref href="Juhta.Net.Diagnostics.DiagnosticMessage.Type" data-throw-if-not-resolved="false"></xref> property.
    - id: message
      type: System.String
      description: >-
        Specifies a message that will be associated with the instance. The value can contain

        format items.
    - id: id
      type: System.String
      description: Specifies a value for the <xref href="Juhta.Net.Diagnostics.DiagnosticMessage.Id" data-throw-if-not-resolved="false"></xref> property.
    content.vb: Protected Sub New(type As DiagnosticMessageType, message As String, id As String)
  overload: Juhta.Net.Diagnostics.DiagnosticMessage.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Juhta.Net.Diagnostics
  commentId: N:Juhta.Net.Diagnostics
  isExternal: false
  name: Juhta.Net.Diagnostics
  nameWithType: Juhta.Net.Diagnostics
  fullName: Juhta.Net.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage
  isExternal: false
  name: FormatMessage
  nameWithType: DiagnosticMessage.FormatMessage
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Id
  commentId: P:Juhta.Net.Diagnostics.DiagnosticMessage.Id
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  isExternal: false
  name: Id
  nameWithType: DiagnosticMessage.Id
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Id
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  isExternal: true
  name: GetIntegerId(String)
  nameWithType: DiagnosticMessage.GetIntegerId(String)
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
  spec.csharp:
  - uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
    name: GetIntegerId
    nameWithType: DiagnosticMessage.GetIntegerId
    fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)
    name: GetIntegerId
    nameWithType: DiagnosticMessage.GetIntegerId
    fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  isExternal: false
  name: GetIntegerId
  nameWithType: DiagnosticMessage.GetIntegerId
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Juhta.Net.Diagnostics.DiagnosticMessage
  commentId: T:Juhta.Net.Diagnostics.DiagnosticMessage
  parent: Juhta.Net.Diagnostics
  isExternal: false
  name: DiagnosticMessage
  nameWithType: DiagnosticMessage
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  isExternal: false
  name: GetIntegerId()
  nameWithType: DiagnosticMessage.GetIntegerId()
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId()
  spec.csharp:
  - uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
    name: GetIntegerId
    nameWithType: DiagnosticMessage.GetIntegerId
    fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
    name: GetIntegerId
    nameWithType: DiagnosticMessage.GetIntegerId
    fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
  commentId: M:Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  isExternal: true
  name: FormatMessage(Object[])
  nameWithType: DiagnosticMessage.FormatMessage(Object[])
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
  nameWithType.vb: DiagnosticMessage.FormatMessage(Object())
  fullName.vb: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object())
  name.vb: FormatMessage(Object())
  spec.csharp:
  - uid: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
    name: FormatMessage
    nameWithType: DiagnosticMessage.FormatMessage
    fullName: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])
    name: FormatMessage
    nameWithType: DiagnosticMessage.FormatMessage
    fullName: Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage
  isExternal: false
  name: GetMessage
  nameWithType: DiagnosticMessage.GetMessage
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId
  isExternal: false
  name: TryGetMessageId
  nameWithType: DiagnosticMessage.TryGetMessageId
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Id*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.Id
  isExternal: false
  name: Id
  nameWithType: DiagnosticMessage.Id
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Id
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Message*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.Message
  isExternal: false
  name: Message
  nameWithType: DiagnosticMessage.Message
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Message
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Type*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.Type
  isExternal: false
  name: Type
  nameWithType: DiagnosticMessage.Type
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Type
- uid: Juhta.Net.Diagnostics.DiagnosticMessageType
  commentId: T:Juhta.Net.Diagnostics.DiagnosticMessageType
  parent: Juhta.Net.Diagnostics
  isExternal: false
  name: DiagnosticMessageType
  nameWithType: DiagnosticMessageType
  fullName: Juhta.Net.Diagnostics.DiagnosticMessageType
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.Type
  commentId: P:Juhta.Net.Diagnostics.DiagnosticMessage.Type
  parent: Juhta.Net.Diagnostics.DiagnosticMessage
  isExternal: false
  name: Type
  nameWithType: DiagnosticMessage.Type
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.Type
- uid: Juhta.Net.Diagnostics.DiagnosticMessage.#ctor*
  commentId: Overload:Juhta.Net.Diagnostics.DiagnosticMessage.#ctor
  isExternal: false
  name: DiagnosticMessage
  nameWithType: DiagnosticMessage.DiagnosticMessage
  fullName: Juhta.Net.Diagnostics.DiagnosticMessage.DiagnosticMessage
