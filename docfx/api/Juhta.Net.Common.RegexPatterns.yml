### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Common.RegexPatterns
  commentId: T:Juhta.Net.Common.RegexPatterns
  id: RegexPatterns
  parent: Juhta.Net.Common
  children:
  - Juhta.Net.Common.RegexPatterns.EmailAddress
  - Juhta.Net.Common.RegexPatterns.EmailAddressList
  - Juhta.Net.Common.RegexPatterns.FullClassName
  langs:
  - csharp
  - vb
  name: RegexPatterns
  nameWithType: RegexPatterns
  fullName: Juhta.Net.Common.RegexPatterns
  type: Class
  source:
    remote:
      path: src/Juhta.Net/Common/RegexPatterns.cs
      branch: release/v1.0.0-rc
      repo: https://github.com/jlahteen/juhta.net.git
    id: RegexPatterns
    path: ../src/Juhta.Net/Common/RegexPatterns.cs
    startLine: 13
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nA static class that defines regular expression patterns.\n"
  example: []
  syntax:
    content: public static class RegexPatterns
    content.vb: Public Module RegexPatterns
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Juhta.Net.Common.RegexPatterns.EmailAddress
  commentId: F:Juhta.Net.Common.RegexPatterns.EmailAddress
  id: EmailAddress
  parent: Juhta.Net.Common.RegexPatterns
  langs:
  - csharp
  - vb
  name: EmailAddress
  nameWithType: RegexPatterns.EmailAddress
  fullName: Juhta.Net.Common.RegexPatterns.EmailAddress
  type: Field
  source:
    remote:
      path: src/Juhta.Net/Common/RegexPatterns.cs
      branch: release/v1.0.0-rc
      repo: https://github.com/jlahteen/juhta.net.git
    id: EmailAddress
    path: ../src/Juhta.Net/Common/RegexPatterns.cs
    startLine: 20
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression pattern for email addresses.\n"
  example: []
  syntax:
    content: public const string EmailAddress = "^[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*\\.[a-zA-Z]{2,4}$"
    return:
      type: System.String
    content.vb: Public Const EmailAddress As String = "^[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*\.[a-zA-Z]{2,4}$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Juhta.Net.Common.RegexPatterns.EmailAddressList
  commentId: F:Juhta.Net.Common.RegexPatterns.EmailAddressList
  id: EmailAddressList
  parent: Juhta.Net.Common.RegexPatterns
  langs:
  - csharp
  - vb
  name: EmailAddressList
  nameWithType: RegexPatterns.EmailAddressList
  fullName: Juhta.Net.Common.RegexPatterns.EmailAddressList
  type: Field
  source:
    remote:
      path: src/Juhta.Net/Common/RegexPatterns.cs
      branch: release/v1.0.0-rc
      repo: https://github.com/jlahteen/juhta.net.git
    id: EmailAddressList
    path: ../src/Juhta.Net/Common/RegexPatterns.cs
    startLine: 25
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression pattern for email address lists.\n"
  example: []
  syntax:
    content: public const string EmailAddressList = "^[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*\\.[a-zA-Z]{2,4}(; ?[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\\.-][a-zA-Z0-9]+)*\\.[a-zA-Z]{2,4})*;?$"
    return:
      type: System.String
    content.vb: Public Const EmailAddressList As String = "^[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*\.[a-zA-Z]{2,4}(; ?[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([_\.-][a-zA-Z0-9]+)*\.[a-zA-Z]{2,4})*;?$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Juhta.Net.Common.RegexPatterns.FullClassName
  commentId: F:Juhta.Net.Common.RegexPatterns.FullClassName
  id: FullClassName
  parent: Juhta.Net.Common.RegexPatterns
  langs:
  - csharp
  - vb
  name: FullClassName
  nameWithType: RegexPatterns.FullClassName
  fullName: Juhta.Net.Common.RegexPatterns.FullClassName
  type: Field
  source:
    remote:
      path: src/Juhta.Net/Common/RegexPatterns.cs
      branch: release/v1.0.0-rc
      repo: https://github.com/jlahteen/juhta.net.git
    id: FullClassName
    path: ../src/Juhta.Net/Common/RegexPatterns.cs
    startLine: 30
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nSpecifies a regular expression pattern for full class names.\n"
  example: []
  syntax:
    content: public const string FullClassName = "^[a-zA-Z0-9_]+(\\.[a-zA-Z0-9_]+)*$"
    return:
      type: System.String
    content.vb: Public Const FullClassName As String = "^[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Juhta.Net.Common
  commentId: N:Juhta.Net.Common
  isExternal: false
  name: Juhta.Net.Common
  nameWithType: Juhta.Net.Common
  fullName: Juhta.Net.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
