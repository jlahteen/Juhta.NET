### YamlMime:ManagedReference
items:
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase
  commentId: T:Juhta.Net.LibraryManagement.LibraryHandleBase
  id: LibraryHandleBase
  parent: Juhta.Net.LibraryManagement
  children:
  - Juhta.Net.LibraryManagement.LibraryHandleBase.#ctor(System.String)
  - Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName
  - Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema
  - Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema(System.Reflection.Assembly,System.String,System.String)
  - Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema(System.Reflection.Assembly,System.String,System.String)
  - Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
  - Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace
  langs:
  - csharp
  - vb
  name: LibraryHandleBase
  nameWithType: LibraryHandleBase
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase
  type: Class
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LibraryHandleBase
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 21
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nDefines an abstract base class for library handle classes.\n"
  example: []
  syntax:
    content: 'public abstract class LibraryHandleBase : ILibraryHandle'
    content.vb: >-
      Public MustInherit Class LibraryHandleBase
          Implements ILibraryHandle
  inheritance:
  - System.Object
  derivedClasses:
  - Juhta.Net.LibraryManagement.DynamicLibraryHandleBase
  implements:
  - Juhta.Net.LibraryManagement.ILibraryHandle
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName
  commentId: P:Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName
  id: ConfigFileName
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  langs:
  - csharp
  - vb
  name: ConfigFileName
  nameWithType: LibraryHandleBase.ConfigFileName
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName
  type: Property
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: ConfigFileName
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 29
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nGets the configuration file name of the library that this <xref href=\"Juhta.Net.LibraryManagement.LibraryHandleBase\" data-throw-if-not-resolved=\"false\"></xref> instance\nrepresents.\n"
  example: []
  syntax:
    content: public virtual string ConfigFileName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property ConfigFileName As String
  overload: Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
  commentId: P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
  id: LibraryFileName
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  langs:
  - csharp
  - vb
  name: LibraryFileName
  nameWithType: LibraryHandleBase.LibraryFileName
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
  type: Property
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LibraryFileName
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 37
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nSee <xref href=\"Juhta.Net.LibraryManagement.ILibraryHandle.LibraryFileName\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual string LibraryFileName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property LibraryFileName As String
  overload: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName*
  implements:
  - Juhta.Net.LibraryManagement.ILibraryHandle.LibraryFileName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace
  commentId: P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace
  id: LibraryRootNamespace
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  langs:
  - csharp
  - vb
  name: LibraryRootNamespace
  nameWithType: LibraryHandleBase.LibraryRootNamespace
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace
  type: Property
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: LibraryRootNamespace
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 45
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nGets the root namespace of the library that this <xref href=\"Juhta.Net.LibraryManagement.LibraryHandleBase\" data-throw-if-not-resolved=\"false\"></xref> instance represents.\n"
  example: []
  syntax:
    content: public virtual string LibraryRootNamespace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property LibraryRootNamespace As String
  overload: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.#ctor(System.String)
  commentId: M:Juhta.Net.LibraryManagement.LibraryHandleBase.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  langs:
  - csharp
  - vb
  name: LibraryHandleBase(String)
  nameWithType: LibraryHandleBase.LibraryHandleBase(String)
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryHandleBase(System.String)
  type: Constructor
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: .ctor
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 58
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nInitializes a new instance.\n"
  example: []
  syntax:
    content: protected LibraryHandleBase(string libraryFileName)
    parameters:
    - id: libraryFileName
      type: System.String
      description: Specifies a value for the <xref href="Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName" data-throw-if-not-resolved="false"></xref> property.
    content.vb: Protected Sub New(libraryFileName As String)
  overload: Juhta.Net.LibraryManagement.LibraryHandleBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema
  commentId: M:Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema
  id: GetCommonConfigSchema
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  langs:
  - csharp
  - vb
  name: GetCommonConfigSchema()
  nameWithType: LibraryHandleBase.GetCommonConfigSchema()
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: GetCommonConfigSchema
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 71
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nGets the embedded schema for the common configuration.\n"
  example: []
  syntax:
    content: protected XmlSchema GetCommonConfigSchema()
    return:
      type: System.Xml.Schema.XmlSchema
      description: Returns the embedded schema for the common configuration.
    content.vb: Protected Function GetCommonConfigSchema As XmlSchema
  overload: Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema(System.Reflection.Assembly,System.String,System.String)
  commentId: M:Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema(System.Reflection.Assembly,System.String,System.String)
  id: GetEmbeddedConfigAndCommonSchema(System.Reflection.Assembly,System.String,System.String)
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  langs:
  - csharp
  - vb
  name: GetEmbeddedConfigAndCommonSchema(Assembly, String, String)
  nameWithType: LibraryHandleBase.GetEmbeddedConfigAndCommonSchema(Assembly, String, String)
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema(System.Reflection.Assembly, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: GetEmbeddedConfigAndCommonSchema
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 85
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nGets an embedded configuration schema plus the common configuration schema.\n"
  example: []
  syntax:
    content: protected XmlSchema[] GetEmbeddedConfigAndCommonSchema(Assembly containingAssembly, string configSchemaFileNamespace, string configSchemaFileName)
    parameters:
    - id: containingAssembly
      type: System.Reflection.Assembly
      description: >-
        Specifies an assembly where the embedded configuration schema will be

        searched for.
    - id: configSchemaFileNamespace
      type: System.String
      description: Specifies the file namespace of an embedded configuration schema.
    - id: configSchemaFileName
      type: System.String
      description: Specifies the file name of an embedded configuration schema.
    return:
      type: System.Xml.Schema.XmlSchema[]
      description: >-
        Returns an array containing two schemas, the specified embedded configuration schema and the

        common configuration schema.
    content.vb: Protected Function GetEmbeddedConfigAndCommonSchema(containingAssembly As Assembly, configSchemaFileNamespace As String, configSchemaFileName As String) As XmlSchema()
  overload: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema(System.Reflection.Assembly,System.String,System.String)
  commentId: M:Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema(System.Reflection.Assembly,System.String,System.String)
  id: GetEmbeddedConfigSchema(System.Reflection.Assembly,System.String,System.String)
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  langs:
  - csharp
  - vb
  name: GetEmbeddedConfigSchema(Assembly, String, String)
  nameWithType: LibraryHandleBase.GetEmbeddedConfigSchema(Assembly, String, String)
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema(System.Reflection.Assembly, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: GetEmbeddedConfigSchema
    path: ../src/Juhta.Net/LibraryManagement/LibraryHandleBase.cs
    startLine: 105
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.LibraryManagement
  summary: "\nGets an embedded configuration schema.\n"
  example: []
  syntax:
    content: protected XmlSchema GetEmbeddedConfigSchema(Assembly containingAssembly, string configSchemaFileNamespace, string configSchemaFileName)
    parameters:
    - id: containingAssembly
      type: System.Reflection.Assembly
      description: >-
        Specifies an assembly where the embedded configuration schema will be

        searched for.
    - id: configSchemaFileNamespace
      type: System.String
      description: Specifies the file namespace of an embedded configuration schema.
    - id: configSchemaFileName
      type: System.String
      description: Specifies the file name of an embedded configuration schema.
    return:
      type: System.Xml.Schema.XmlSchema
      description: >-
        Returns the embedded configuration schema from the specified assembly corresponding to the

        specified file namespace and name.
    content.vb: Protected Function GetEmbeddedConfigSchema(containingAssembly As Assembly, configSchemaFileNamespace As String, configSchemaFileName As String) As XmlSchema
  overload: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Juhta.Net.LibraryManagement
  commentId: N:Juhta.Net.LibraryManagement
  isExternal: false
  name: Juhta.Net.LibraryManagement
  nameWithType: Juhta.Net.LibraryManagement
  fullName: Juhta.Net.LibraryManagement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Juhta.Net.LibraryManagement.ILibraryHandle
  commentId: T:Juhta.Net.LibraryManagement.ILibraryHandle
  parent: Juhta.Net.LibraryManagement
  isExternal: false
  name: ILibraryHandle
  nameWithType: ILibraryHandle
  fullName: Juhta.Net.LibraryManagement.ILibraryHandle
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase
  commentId: T:Juhta.Net.LibraryManagement.LibraryHandleBase
  parent: Juhta.Net.LibraryManagement
  isExternal: false
  name: LibraryHandleBase
  nameWithType: LibraryHandleBase
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName*
  commentId: Overload:Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName
  isExternal: false
  name: ConfigFileName
  nameWithType: LibraryHandleBase.ConfigFileName
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.ConfigFileName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Juhta.Net.LibraryManagement.ILibraryHandle.LibraryFileName
  commentId: P:Juhta.Net.LibraryManagement.ILibraryHandle.LibraryFileName
  parent: Juhta.Net.LibraryManagement.ILibraryHandle
  isExternal: false
  name: LibraryFileName
  nameWithType: ILibraryHandle.LibraryFileName
  fullName: Juhta.Net.LibraryManagement.ILibraryHandle.LibraryFileName
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName*
  commentId: Overload:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
  isExternal: false
  name: LibraryFileName
  nameWithType: LibraryHandleBase.LibraryFileName
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace*
  commentId: Overload:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace
  isExternal: false
  name: LibraryRootNamespace
  nameWithType: LibraryHandleBase.LibraryRootNamespace
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryRootNamespace
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
  commentId: P:Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
  parent: Juhta.Net.LibraryManagement.LibraryHandleBase
  isExternal: false
  name: LibraryFileName
  nameWithType: LibraryHandleBase.LibraryFileName
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryFileName
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.#ctor*
  commentId: Overload:Juhta.Net.LibraryManagement.LibraryHandleBase.#ctor
  isExternal: false
  name: LibraryHandleBase
  nameWithType: LibraryHandleBase.LibraryHandleBase
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.LibraryHandleBase
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema*
  commentId: Overload:Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema
  isExternal: false
  name: GetCommonConfigSchema
  nameWithType: LibraryHandleBase.GetCommonConfigSchema
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.GetCommonConfigSchema
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: false
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema*
  commentId: Overload:Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema
  isExternal: false
  name: GetEmbeddedConfigAndCommonSchema
  nameWithType: LibraryHandleBase.GetEmbeddedConfigAndCommonSchema
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigAndCommonSchema
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Xml.Schema.XmlSchema[]
  name: XmlSchema[]
  nameWithType: XmlSchema[]
  fullName: System.Xml.Schema.XmlSchema[]
  nameWithType.vb: XmlSchema()
  fullName.vb: System.Xml.Schema.XmlSchema()
  name.vb: XmlSchema()
  spec.csharp:
  - uid: System.Xml.Schema.XmlSchema
    name: XmlSchema
    nameWithType: XmlSchema
    fullName: System.Xml.Schema.XmlSchema
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Xml.Schema.XmlSchema
    name: XmlSchema
    nameWithType: XmlSchema
    fullName: System.Xml.Schema.XmlSchema
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema*
  commentId: Overload:Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema
  isExternal: false
  name: GetEmbeddedConfigSchema
  nameWithType: LibraryHandleBase.GetEmbeddedConfigSchema
  fullName: Juhta.Net.LibraryManagement.LibraryHandleBase.GetEmbeddedConfigSchema
