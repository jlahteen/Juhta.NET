### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Application
  commentId: T:Juhta.Net.Application
  id: Application
  parent: Juhta.Net
  children:
  - Juhta.Net.Application.#ctor
  - Juhta.Net.Application.#ctor(System.String)
  - Juhta.Net.Application.#ctor(System.String,System.String)
  - Juhta.Net.Application.BinDirectory
  - Juhta.Net.Application.Close
  - Juhta.Net.Application.CloseInstance
  - Juhta.Net.Application.ConfigDirectory
  - Juhta.Net.Application.DefaultConfigFileName
  - Juhta.Net.Application.GetDynamicLibraryContext``2
  - Juhta.Net.Application.IsInitialized
  - Juhta.Net.Application.Name
  - Juhta.Net.Application.ServiceFactory
  - Juhta.Net.Application.Start
  - Juhta.Net.Application.StartInstance
  - Juhta.Net.Application.StartInstance(System.String)
  - Juhta.Net.Application.StartInstance(System.String,System.String)
  langs:
  - csharp
  - vb
  name: Application
  nameWithType: Application
  fullName: Juhta.Net.Application
  type: Class
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: Application
    path: ../src/Juhta.Net/Application.cs
    startLine: 27
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nA class that represents an application built on the top of the framework. The class provides basic information\nabout the application and methods for initializing and closing the application.\n"
  example: []
  syntax:
    content: 'public class Application : Singleton<Application>'
    content.vb: >-
      Public Class Application

          Inherits Singleton(Of Application)
  inheritance:
  - System.Object
  - Juhta.Net.Common.Singleton{Juhta.Net.Application}
  inheritedMembers:
  - Juhta.Net.Common.Singleton{Juhta.Net.Application}.Instance
  - Juhta.Net.Common.Singleton{Juhta.Net.Application}.ResetSingletonInstance
  - Juhta.Net.Common.Singleton{Juhta.Net.Application}.SetSingletonInstance(Juhta.Net.Application)
  - Juhta.Net.Common.Singleton{Juhta.Net.Application}.s_instance
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Juhta.Net.Application.#ctor
  commentId: M:Juhta.Net.Application.#ctor
  id: '#ctor'
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: Application()
  nameWithType: Application.Application()
  fullName: Juhta.Net.Application.Application()
  type: Constructor
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: .ctor
    path: ../src/Juhta.Net/Application.cs
    startLine: 36
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nInitializes a new instance.\n"
  remarks: >-
    Log events will be written to the current user&apos;s temp directory, and the configuration files are

    assumed to locate in the binary directory.
  example: []
  syntax:
    content: public Application()
    content.vb: Public Sub New
  overload: Juhta.Net.Application.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Juhta.Net.Application.#ctor(System.String)
  commentId: M:Juhta.Net.Application.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: Application(String)
  nameWithType: Application.Application(String)
  fullName: Juhta.Net.Application.Application(System.String)
  type: Constructor
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: .ctor
    path: ../src/Juhta.Net/Application.cs
    startLine: 46
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nInitializes a new instance.\n"
  remarks: The configuration files are assumed to locate in the binary directory.
  example: []
  syntax:
    content: public Application(string logFilePath)
    parameters:
    - id: logFilePath
      type: System.String
      description: >-
        Specifies a log file path. Can be null in which case the log file will be written

        to the current user&apos;s temp directory. This default location will also be used if <code data-dev-comment-type="paramref" class="paramref">logFilePath</code>

        specifies an invalid log file.
    content.vb: Public Sub New(logFilePath As String)
  overload: Juhta.Net.Application.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Juhta.Net.Application.#ctor(System.String,System.String)
  commentId: M:Juhta.Net.Application.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: Application(String, String)
  nameWithType: Application.Application(String, String)
  fullName: Juhta.Net.Application.Application(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: .ctor
    path: ../src/Juhta.Net/Application.cs
    startLine: 57
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nInitializes a new instance.\n"
  example: []
  syntax:
    content: public Application(string logFilePath, string configDirectory)
    parameters:
    - id: logFilePath
      type: System.String
      description: >-
        Specifies a log file path. Can be null in which case the log file will be written

        to the current user&apos;s temp directory. This default location will also be used if <code data-dev-comment-type="paramref" class="paramref">logFilePath</code>

        specifies an invalid log file.
    - id: configDirectory
      type: System.String
      description: >-
        Specifies a directory to search for configuration files. Can be null in which

        case the configuration files are assumed to locate in the binary directory.
    content.vb: Public Sub New(logFilePath As String, configDirectory As String)
  overload: Juhta.Net.Application.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Juhta.Net.Application.Close
  commentId: M:Juhta.Net.Application.Close
  id: Close
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: Application.Close()
  fullName: Juhta.Net.Application.Close()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: Close
    path: ../src/Juhta.Net/Application.cs
    startLine: 86
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nCloses the application by closing all configured startup libraries and the core of the framework.\n"
  example: []
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  overload: Juhta.Net.Application.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Juhta.Net.Application.CloseInstance
  commentId: M:Juhta.Net.Application.CloseInstance
  id: CloseInstance
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: CloseInstance()
  nameWithType: Application.CloseInstance()
  fullName: Juhta.Net.Application.CloseInstance()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: CloseInstance
    path: ../src/Juhta.Net/Application.cs
    startLine: 135
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nCloses the possibly created singleton <xref href=\"Juhta.Net.Application\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public static void CloseInstance()
    content.vb: Public Shared Sub CloseInstance
  overload: Juhta.Net.Application.CloseInstance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Application.GetDynamicLibraryContext``2
  commentId: M:Juhta.Net.Application.GetDynamicLibraryContext``2
  id: GetDynamicLibraryContext``2
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: GetDynamicLibraryContext<TDynamicLibrary, TLibraryState>()
  nameWithType: Application.GetDynamicLibraryContext<TDynamicLibrary, TLibraryState>()
  fullName: Juhta.Net.Application.GetDynamicLibraryContext<TDynamicLibrary, TLibraryState>()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: GetDynamicLibraryContext
    path: ../src/Juhta.Net/Application.cs
    startLine: 154
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nCreates an instance of <xref href=\"Juhta.Net.LibraryManagement.DynamicLibraryContext%602\" data-throw-if-not-resolved=\"false\"></xref> corresponding to\nspecified dynamic library type and library state type.\n"
  example: []
  syntax:
    content: 'public DynamicLibraryContext<TDynamicLibrary, TLibraryState> GetDynamicLibraryContext<TDynamicLibrary, TLibraryState>()where TDynamicLibrary : IDynamicLibrary where TLibraryState : ILibraryState'
    typeParameters:
    - id: TDynamicLibrary
      description: Specifies a dynamic library type.
    - id: TLibraryState
      description: Specifies a library state type.
    return:
      type: Juhta.Net.LibraryManagement.DynamicLibraryContext{{TDynamicLibrary},{TLibraryState}}
      description: Returns the created <xref href="Juhta.Net.LibraryManagement.DynamicLibraryContext%602" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Function GetDynamicLibraryContext(Of TDynamicLibrary As IDynamicLibrary, TLibraryState As ILibraryState) As DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  overload: Juhta.Net.Application.GetDynamicLibraryContext*
  nameWithType.vb: Application.GetDynamicLibraryContext(Of TDynamicLibrary, TLibraryState)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Juhta.Net.Application.GetDynamicLibraryContext(Of TDynamicLibrary, TLibraryState)()
  name.vb: GetDynamicLibraryContext(Of TDynamicLibrary, TLibraryState)()
- uid: Juhta.Net.Application.Start
  commentId: M:Juhta.Net.Application.Start
  id: Start
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: Application.Start()
  fullName: Juhta.Net.Application.Start()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: Start
    path: ../src/Juhta.Net/Application.cs
    startLine: 164
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nStarts the application by initializing the core of the framework and all configured startup libraries.\n"
  example: []
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: Juhta.Net.Application.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Juhta.Net.Application.StartInstance
  commentId: M:Juhta.Net.Application.StartInstance
  id: StartInstance
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: StartInstance()
  nameWithType: Application.StartInstance()
  fullName: Juhta.Net.Application.StartInstance()
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: StartInstance
    path: ../src/Juhta.Net/Application.cs
    startLine: 223
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nCreates and starts a new singleton <xref href=\"Juhta.Net.Application\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  remarks: >-
    Log events will be written to the current user&apos;s temp directory, and the configuration files are

    assumed to locate in the binary directory.
  example: []
  syntax:
    content: public static void StartInstance()
    content.vb: Public Shared Sub StartInstance
  overload: Juhta.Net.Application.StartInstance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Application.StartInstance(System.String)
  commentId: M:Juhta.Net.Application.StartInstance(System.String)
  id: StartInstance(System.String)
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: StartInstance(String)
  nameWithType: Application.StartInstance(String)
  fullName: Juhta.Net.Application.StartInstance(System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: StartInstance
    path: ../src/Juhta.Net/Application.cs
    startLine: 235
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nCreates and starts a new singleton <xref href=\"Juhta.Net.Application\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  remarks: The configuration files are assumed to locate in the binary directory.
  example: []
  syntax:
    content: public static void StartInstance(string logFilePath)
    parameters:
    - id: logFilePath
      type: System.String
      description: >-
        Specifies a log file path. Can be null in which case the log file will be written

        to the current user&apos;s temp directory. This default location will also be used if <code data-dev-comment-type="paramref" class="paramref">logFilePath</code>

        specifies an invalid log file.
    content.vb: Public Shared Sub StartInstance(logFilePath As String)
  overload: Juhta.Net.Application.StartInstance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Application.StartInstance(System.String,System.String)
  commentId: M:Juhta.Net.Application.StartInstance(System.String,System.String)
  id: StartInstance(System.String,System.String)
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: StartInstance(String, String)
  nameWithType: Application.StartInstance(String, String)
  fullName: Juhta.Net.Application.StartInstance(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: StartInstance
    path: ../src/Juhta.Net/Application.cs
    startLine: 248
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nCreates and starts a new singleton <xref href=\"Juhta.Net.Application\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public static void StartInstance(string logFilePath, string configDirectory)
    parameters:
    - id: logFilePath
      type: System.String
      description: >-
        Specifies a log file path. Can be null in which case the log file will be written

        to the current user&apos;s temp directory. This default location will also be used if <code data-dev-comment-type="paramref" class="paramref">logFilePath</code>

        specifies an invalid log file.
    - id: configDirectory
      type: System.String
      description: >-
        Specifies a directory to search for configuration files. Can be null in which

        case the configuration files are assumed to locate in the binary directory.
    content.vb: Public Shared Sub StartInstance(logFilePath As String, configDirectory As String)
  overload: Juhta.Net.Application.StartInstance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Juhta.Net.Application.BinDirectory
  commentId: P:Juhta.Net.Application.BinDirectory
  id: BinDirectory
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: BinDirectory
  nameWithType: Application.BinDirectory
  fullName: Juhta.Net.Application.BinDirectory
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: BinDirectory
    path: ../src/Juhta.Net/Application.cs
    startLine: 263
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nGets the binary directory for the framework and application libraries. The return value is null if the\napplication is not initialized.\n"
  example: []
  syntax:
    content: public string BinDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BinDirectory As String
  overload: Juhta.Net.Application.BinDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Application.ConfigDirectory
  commentId: P:Juhta.Net.Application.ConfigDirectory
  id: ConfigDirectory
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: ConfigDirectory
  nameWithType: Application.ConfigDirectory
  fullName: Juhta.Net.Application.ConfigDirectory
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: ConfigDirectory
    path: ../src/Juhta.Net/Application.cs
    startLine: 272
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nGets the configuration directory for the framework and application libraries. The return value is null if\nthe application is not initialized.\n"
  example: []
  syntax:
    content: public string ConfigDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ConfigDirectory As String
  overload: Juhta.Net.Application.ConfigDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Application.DefaultConfigFileName
  commentId: P:Juhta.Net.Application.DefaultConfigFileName
  id: DefaultConfigFileName
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: DefaultConfigFileName
  nameWithType: Application.DefaultConfigFileName
  fullName: Juhta.Net.Application.DefaultConfigFileName
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: DefaultConfigFileName
    path: ../src/Juhta.Net/Application.cs
    startLine: 280
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nGets the name of the default configuration file for the application. Can be null.\n"
  example: []
  syntax:
    content: public string DefaultConfigFileName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DefaultConfigFileName As String
  overload: Juhta.Net.Application.DefaultConfigFileName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Application.IsInitialized
  commentId: P:Juhta.Net.Application.IsInitialized
  id: IsInitialized
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: IsInitialized
  nameWithType: Application.IsInitialized
  fullName: Juhta.Net.Application.IsInitialized
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: IsInitialized
    path: ../src/Juhta.Net/Application.cs
    startLine: 288
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nReturns true if the application has been initialized, otherwise false.\n"
  example: []
  syntax:
    content: public bool IsInitialized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInitialized As Boolean
  overload: Juhta.Net.Application.IsInitialized*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Application.Name
  commentId: P:Juhta.Net.Application.Name
  id: Name
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Application.Name
  fullName: Juhta.Net.Application.Name
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: Name
    path: ../src/Juhta.Net/Application.cs
    startLine: 296
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nGets the name of the application.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Juhta.Net.Application.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Juhta.Net.Application.ServiceFactory
  commentId: P:Juhta.Net.Application.ServiceFactory
  id: ServiceFactory
  parent: Juhta.Net.Application
  langs:
  - csharp
  - vb
  name: ServiceFactory
  nameWithType: Application.ServiceFactory
  fullName: Juhta.Net.Application.ServiceFactory
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Application.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: ServiceFactory
    path: ../src/Juhta.Net/Application.cs
    startLine: 311
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net
  summary: "\nGets the <xref href=\"Juhta.Net.Application.ServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> singleton instance that provides access to the application&apos;s\ndependency injection services.\n"
  example: []
  syntax:
    content: public ServiceFactory ServiceFactory { get; }
    parameters: []
    return:
      type: Juhta.Net.Services.ServiceFactory
    content.vb: Public ReadOnly Property ServiceFactory As ServiceFactory
  overload: Juhta.Net.Application.ServiceFactory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Juhta.Net
  commentId: N:Juhta.Net
  isExternal: false
  name: Juhta.Net
  nameWithType: Juhta.Net
  fullName: Juhta.Net
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Application}
  commentId: T:Juhta.Net.Common.Singleton{Juhta.Net.Application}
  parent: Juhta.Net.Common
  definition: Juhta.Net.Common.Singleton`1
  name: Singleton<Application>
  nameWithType: Singleton<Application>
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Application>
  nameWithType.vb: Singleton(Of Application)
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Application)
  name.vb: Singleton(Of Application)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: <
    nameWithType: <
    fullName: <
  - uid: Juhta.Net.Application
    name: Application
    nameWithType: Application
    fullName: Juhta.Net.Application
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Juhta.Net.Application
    name: Application
    nameWithType: Application
    fullName: Juhta.Net.Application
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Application}.Instance
  commentId: P:Juhta.Net.Common.Singleton{Juhta.Net.Application}.Instance
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Application}
  definition: Juhta.Net.Common.Singleton`1.Instance
  name: Instance
  nameWithType: Singleton<Application>.Instance
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Application>.Instance
  nameWithType.vb: Singleton(Of Application).Instance
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Application).Instance
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Application}.ResetSingletonInstance
  commentId: M:Juhta.Net.Common.Singleton{Juhta.Net.Application}.ResetSingletonInstance
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Application}
  definition: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
  name: ResetSingletonInstance()
  nameWithType: Singleton<Application>.ResetSingletonInstance()
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Application>.ResetSingletonInstance()
  nameWithType.vb: Singleton(Of Application).ResetSingletonInstance()
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Application).ResetSingletonInstance()
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton<Application>.ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<Juhta.Net.Application>.ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton(Of Application).ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of Juhta.Net.Application).ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Application}.SetSingletonInstance(Juhta.Net.Application)
  commentId: M:Juhta.Net.Common.Singleton{Juhta.Net.Application}.SetSingletonInstance(Juhta.Net.Application)
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Application}
  definition: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
  name: SetSingletonInstance(Application)
  nameWithType: Singleton<Application>.SetSingletonInstance(Application)
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Application>.SetSingletonInstance(Juhta.Net.Application)
  nameWithType.vb: Singleton(Of Application).SetSingletonInstance(Application)
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Application).SetSingletonInstance(Juhta.Net.Application)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton<Application>.SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<Juhta.Net.Application>.SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Juhta.Net.Application
    name: Application
    nameWithType: Application
    fullName: Juhta.Net.Application
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton(Of Application).SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of Juhta.Net.Application).SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Juhta.Net.Application
    name: Application
    nameWithType: Application
    fullName: Juhta.Net.Application
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton{Juhta.Net.Application}.s_instance
  commentId: F:Juhta.Net.Common.Singleton{Juhta.Net.Application}.s_instance
  parent: Juhta.Net.Common.Singleton{Juhta.Net.Application}
  definition: Juhta.Net.Common.Singleton`1.s_instance
  name: s_instance
  nameWithType: Singleton<Application>.s_instance
  fullName: Juhta.Net.Common.Singleton<Juhta.Net.Application>.s_instance
  nameWithType.vb: Singleton(Of Application).s_instance
  fullName.vb: Juhta.Net.Common.Singleton(Of Juhta.Net.Application).s_instance
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.Common.Singleton`1
  commentId: T:Juhta.Net.Common.Singleton`1
  isExternal: false
  name: Singleton<T>
  nameWithType: Singleton<T>
  fullName: Juhta.Net.Common.Singleton<T>
  nameWithType.vb: Singleton(Of T)
  fullName.vb: Juhta.Net.Common.Singleton(Of T)
  name.vb: Singleton(Of T)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Juhta.Net.Common.Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common
  commentId: N:Juhta.Net.Common
  isExternal: false
  name: Juhta.Net.Common
  nameWithType: Juhta.Net.Common
  fullName: Juhta.Net.Common
- uid: Juhta.Net.Common.Singleton`1.Instance
  commentId: P:Juhta.Net.Common.Singleton`1.Instance
  isExternal: false
  name: Instance
  nameWithType: Singleton<T>.Instance
  fullName: Juhta.Net.Common.Singleton<T>.Instance
  nameWithType.vb: Singleton(Of T).Instance
  fullName.vb: Juhta.Net.Common.Singleton(Of T).Instance
- uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
  commentId: M:Juhta.Net.Common.Singleton`1.ResetSingletonInstance
  isExternal: false
  name: ResetSingletonInstance()
  nameWithType: Singleton<T>.ResetSingletonInstance()
  fullName: Juhta.Net.Common.Singleton<T>.ResetSingletonInstance()
  nameWithType.vb: Singleton(Of T).ResetSingletonInstance()
  fullName.vb: Juhta.Net.Common.Singleton(Of T).ResetSingletonInstance()
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton<T>.ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<T>.ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.ResetSingletonInstance
    name: ResetSingletonInstance
    nameWithType: Singleton(Of T).ResetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of T).ResetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
  commentId: M:Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
  isExternal: false
  name: SetSingletonInstance(T)
  nameWithType: Singleton<T>.SetSingletonInstance(T)
  fullName: Juhta.Net.Common.Singleton<T>.SetSingletonInstance(T)
  nameWithType.vb: Singleton(Of T).SetSingletonInstance(T)
  fullName.vb: Juhta.Net.Common.Singleton(Of T).SetSingletonInstance(T)
  spec.csharp:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton<T>.SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton<T>.SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)
    name: SetSingletonInstance
    nameWithType: Singleton(Of T).SetSingletonInstance
    fullName: Juhta.Net.Common.Singleton(Of T).SetSingletonInstance
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Common.Singleton`1.s_instance
  commentId: F:Juhta.Net.Common.Singleton`1.s_instance
  isExternal: false
  name: s_instance
  nameWithType: Singleton<T>.s_instance
  fullName: Juhta.Net.Common.Singleton<T>.s_instance
  nameWithType.vb: Singleton(Of T).s_instance
  fullName.vb: Juhta.Net.Common.Singleton(Of T).s_instance
- uid: Juhta.Net.Application.#ctor*
  commentId: Overload:Juhta.Net.Application.#ctor
  isExternal: false
  name: Application
  nameWithType: Application.Application
  fullName: Juhta.Net.Application.Application
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Juhta.Net.Application.Close*
  commentId: Overload:Juhta.Net.Application.Close
  isExternal: false
  name: Close
  nameWithType: Application.Close
  fullName: Juhta.Net.Application.Close
- uid: Juhta.Net.Application
  commentId: T:Juhta.Net.Application
  isExternal: false
  name: Application
  nameWithType: Application
  fullName: Juhta.Net.Application
- uid: Juhta.Net.Application.CloseInstance*
  commentId: Overload:Juhta.Net.Application.CloseInstance
  isExternal: false
  name: CloseInstance
  nameWithType: Application.CloseInstance
  fullName: Juhta.Net.Application.CloseInstance
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  commentId: T:Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  isExternal: false
  name: DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  name.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  spec.csharp:
  - uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
    name: DynamicLibraryContext
    nameWithType: DynamicLibraryContext
    fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TDynamicLibrary
    nameWithType: TDynamicLibrary
    fullName: TDynamicLibrary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLibraryState
    nameWithType: TLibraryState
    fullName: TLibraryState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
    name: DynamicLibraryContext
    nameWithType: DynamicLibraryContext
    fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDynamicLibrary
    nameWithType: TDynamicLibrary
    fullName: TDynamicLibrary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLibraryState
    nameWithType: TLibraryState
    fullName: TLibraryState
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.Application.GetDynamicLibraryContext*
  commentId: Overload:Juhta.Net.Application.GetDynamicLibraryContext
  isExternal: false
  name: GetDynamicLibraryContext
  nameWithType: Application.GetDynamicLibraryContext
  fullName: Juhta.Net.Application.GetDynamicLibraryContext
- uid: Juhta.Net.LibraryManagement.DynamicLibraryContext{{TDynamicLibrary},{TLibraryState}}
  commentId: T:Juhta.Net.LibraryManagement.DynamicLibraryContext{``0,``1}
  parent: Juhta.Net.LibraryManagement
  definition: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
  name: DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  nameWithType: DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext<TDynamicLibrary, TLibraryState>
  nameWithType.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  fullName.vb: Juhta.Net.LibraryManagement.DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  name.vb: DynamicLibraryContext(Of TDynamicLibrary, TLibraryState)
  spec.csharp:
  - uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
    name: DynamicLibraryContext
    nameWithType: DynamicLibraryContext
    fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TDynamicLibrary
    nameWithType: TDynamicLibrary
    fullName: TDynamicLibrary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLibraryState
    nameWithType: TLibraryState
    fullName: TLibraryState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Juhta.Net.LibraryManagement.DynamicLibraryContext`2
    name: DynamicLibraryContext
    nameWithType: DynamicLibraryContext
    fullName: Juhta.Net.LibraryManagement.DynamicLibraryContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDynamicLibrary
    nameWithType: TDynamicLibrary
    fullName: TDynamicLibrary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLibraryState
    nameWithType: TLibraryState
    fullName: TLibraryState
  - name: )
    nameWithType: )
    fullName: )
- uid: Juhta.Net.LibraryManagement
  commentId: N:Juhta.Net.LibraryManagement
  isExternal: false
  name: Juhta.Net.LibraryManagement
  nameWithType: Juhta.Net.LibraryManagement
  fullName: Juhta.Net.LibraryManagement
- uid: Juhta.Net.Application.Start*
  commentId: Overload:Juhta.Net.Application.Start
  isExternal: false
  name: Start
  nameWithType: Application.Start
  fullName: Juhta.Net.Application.Start
- uid: Juhta.Net.Application.StartInstance*
  commentId: Overload:Juhta.Net.Application.StartInstance
  isExternal: false
  name: StartInstance
  nameWithType: Application.StartInstance
  fullName: Juhta.Net.Application.StartInstance
- uid: Juhta.Net.Application.BinDirectory*
  commentId: Overload:Juhta.Net.Application.BinDirectory
  isExternal: false
  name: BinDirectory
  nameWithType: Application.BinDirectory
  fullName: Juhta.Net.Application.BinDirectory
- uid: Juhta.Net.Application.ConfigDirectory*
  commentId: Overload:Juhta.Net.Application.ConfigDirectory
  isExternal: false
  name: ConfigDirectory
  nameWithType: Application.ConfigDirectory
  fullName: Juhta.Net.Application.ConfigDirectory
- uid: Juhta.Net.Application.DefaultConfigFileName*
  commentId: Overload:Juhta.Net.Application.DefaultConfigFileName
  isExternal: false
  name: DefaultConfigFileName
  nameWithType: Application.DefaultConfigFileName
  fullName: Juhta.Net.Application.DefaultConfigFileName
- uid: Juhta.Net.Application.IsInitialized*
  commentId: Overload:Juhta.Net.Application.IsInitialized
  isExternal: false
  name: IsInitialized
  nameWithType: Application.IsInitialized
  fullName: Juhta.Net.Application.IsInitialized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Juhta.Net.Application.Name*
  commentId: Overload:Juhta.Net.Application.Name
  isExternal: false
  name: Name
  nameWithType: Application.Name
  fullName: Juhta.Net.Application.Name
- uid: Juhta.Net.Application.ServiceFactory
  commentId: P:Juhta.Net.Application.ServiceFactory
- uid: Juhta.Net.Application.ServiceFactory*
  commentId: Overload:Juhta.Net.Application.ServiceFactory
  isExternal: false
  name: ServiceFactory
  nameWithType: Application.ServiceFactory
  fullName: Juhta.Net.Application.ServiceFactory
- uid: Juhta.Net.Services.ServiceFactory
  commentId: T:Juhta.Net.Services.ServiceFactory
  parent: Juhta.Net.Services
  isExternal: false
  name: ServiceFactory
  nameWithType: ServiceFactory
  fullName: Juhta.Net.Services.ServiceFactory
- uid: Juhta.Net.Services
  commentId: N:Juhta.Net.Services
  isExternal: false
  name: Juhta.Net.Services
  nameWithType: Juhta.Net.Services
  fullName: Juhta.Net.Services
