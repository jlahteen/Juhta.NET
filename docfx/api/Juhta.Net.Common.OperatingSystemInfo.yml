### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Common.OperatingSystemInfo
  commentId: T:Juhta.Net.Common.OperatingSystemInfo
  id: OperatingSystemInfo
  parent: Juhta.Net.Common
  children:
  - Juhta.Net.Common.OperatingSystemInfo.IsLinux
  - Juhta.Net.Common.OperatingSystemInfo.IsMacOS
  - Juhta.Net.Common.OperatingSystemInfo.IsWindows
  langs:
  - csharp
  - vb
  name: OperatingSystemInfo
  nameWithType: OperatingSystemInfo
  fullName: Juhta.Net.Common.OperatingSystemInfo
  type: Class
  source:
    remote:
      path: src/Juhta.Net/Common/OperatingSystemInfo.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: OperatingSystemInfo
    path: ../src/Juhta.Net/Common/OperatingSystemInfo.cs
    startLine: 15
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nDefines a static class that provides information about the underlying operating system.\n"
  example: []
  syntax:
    content: public static class OperatingSystemInfo
    content.vb: Public Module OperatingSystemInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Juhta.Net.Common.OperatingSystemInfo.IsLinux
  commentId: P:Juhta.Net.Common.OperatingSystemInfo.IsLinux
  id: IsLinux
  parent: Juhta.Net.Common.OperatingSystemInfo
  langs:
  - csharp
  - vb
  name: IsLinux
  nameWithType: OperatingSystemInfo.IsLinux
  fullName: Juhta.Net.Common.OperatingSystemInfo.IsLinux
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Common/OperatingSystemInfo.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: IsLinux
    path: ../src/Juhta.Net/Common/OperatingSystemInfo.cs
    startLine: 22
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nReturns true if the application is running on Linux, otherwise false.\n"
  example: []
  syntax:
    content: public static bool IsLinux { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsLinux As Boolean
  overload: Juhta.Net.Common.OperatingSystemInfo.IsLinux*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Juhta.Net.Common.OperatingSystemInfo.IsMacOS
  commentId: P:Juhta.Net.Common.OperatingSystemInfo.IsMacOS
  id: IsMacOS
  parent: Juhta.Net.Common.OperatingSystemInfo
  langs:
  - csharp
  - vb
  name: IsMacOS
  nameWithType: OperatingSystemInfo.IsMacOS
  fullName: Juhta.Net.Common.OperatingSystemInfo.IsMacOS
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Common/OperatingSystemInfo.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: IsMacOS
    path: ../src/Juhta.Net/Common/OperatingSystemInfo.cs
    startLine: 30
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nReturns true if the application is running on MacOS, otherwise false.\n"
  example: []
  syntax:
    content: public static bool IsMacOS { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsMacOS As Boolean
  overload: Juhta.Net.Common.OperatingSystemInfo.IsMacOS*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Juhta.Net.Common.OperatingSystemInfo.IsWindows
  commentId: P:Juhta.Net.Common.OperatingSystemInfo.IsWindows
  id: IsWindows
  parent: Juhta.Net.Common.OperatingSystemInfo
  langs:
  - csharp
  - vb
  name: IsWindows
  nameWithType: OperatingSystemInfo.IsWindows
  fullName: Juhta.Net.Common.OperatingSystemInfo.IsWindows
  type: Property
  source:
    remote:
      path: src/Juhta.Net/Common/OperatingSystemInfo.cs
      branch: develop
      repo: https://github.com/jlahteen/juhta.net
    id: IsWindows
    path: ../src/Juhta.Net/Common/OperatingSystemInfo.cs
    startLine: 38
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nReturns true if the application is running on Windows, otherwise false.\n"
  example: []
  syntax:
    content: public static bool IsWindows { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsWindows As Boolean
  overload: Juhta.Net.Common.OperatingSystemInfo.IsWindows*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Juhta.Net.Common
  commentId: N:Juhta.Net.Common
  isExternal: false
  name: Juhta.Net.Common
  nameWithType: Juhta.Net.Common
  fullName: Juhta.Net.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.Common.OperatingSystemInfo.IsLinux*
  commentId: Overload:Juhta.Net.Common.OperatingSystemInfo.IsLinux
  isExternal: false
  name: IsLinux
  nameWithType: OperatingSystemInfo.IsLinux
  fullName: Juhta.Net.Common.OperatingSystemInfo.IsLinux
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Juhta.Net.Common.OperatingSystemInfo.IsMacOS*
  commentId: Overload:Juhta.Net.Common.OperatingSystemInfo.IsMacOS
  isExternal: false
  name: IsMacOS
  nameWithType: OperatingSystemInfo.IsMacOS
  fullName: Juhta.Net.Common.OperatingSystemInfo.IsMacOS
- uid: Juhta.Net.Common.OperatingSystemInfo.IsWindows*
  commentId: Overload:Juhta.Net.Common.OperatingSystemInfo.IsWindows
  isExternal: false
  name: IsWindows
  nameWithType: OperatingSystemInfo.IsWindows
  fullName: Juhta.Net.Common.OperatingSystemInfo.IsWindows
