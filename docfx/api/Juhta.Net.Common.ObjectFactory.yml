### YamlMime:ManagedReference
items:
- uid: Juhta.Net.Common.ObjectFactory
  commentId: T:Juhta.Net.Common.ObjectFactory
  id: ObjectFactory
  parent: Juhta.Net.Common
  children:
  - Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri)
  - Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri,System.Object[])
  - Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String)
  - Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String,System.Object[])
  - Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String)
  - Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String,System.Object[])
  - Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Xml.XmlNode)
  langs:
  - csharp
  - vb
  name: ObjectFactory
  nameWithType: ObjectFactory
  fullName: Juhta.Net.Common.ObjectFactory
  type: Class
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: ObjectFactory
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 21
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nA static class that provides services for creating instances of such classes whose type is not directly\nreferencable in the current programming context. A typical scenario for using this class is to create instances\nof classes that are not available at the build time but are known to implement a specific interface.\n"
  example: []
  syntax:
    content: public static class ObjectFactory
    content.vb: Public Module ObjectFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String)
  commentId: M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String)
  id: CreateInstance``1(System.Reflection.Assembly,System.String)
  parent: Juhta.Net.Common.ObjectFactory
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(Assembly, String)
  nameWithType: ObjectFactory.CreateInstance<T>(Assembly, String)
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance<T>(System.Reflection.Assembly, System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CreateInstance
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 35
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nCreates an instance of a specified class by using the default constructor.\n"
  example: []
  syntax:
    content: public static T CreateInstance<T>(Assembly assembly, string className)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Specifies an Assembly object.
    - id: className
      type: System.String
      description: >-
        Specifies an assembly class name. The value can begin with a &apos;.&apos; character in which

        case the root namespace for the class will be taken from the file name part of the Assembly object&apos;s

        Location property.
    typeParameters:
    - id: T
      description: >-
        Specifies a type for the return value. An instance to create must be castable to this

        type.
    return:
      type: '{T}'
      description: Returns the created instance casted to the requested type.
    content.vb: Public Shared Function CreateInstance(Of T)(assembly As Assembly, className As String) As T
  overload: Juhta.Net.Common.ObjectFactory.CreateInstance*
  nameWithType.vb: ObjectFactory.CreateInstance(Of T)(Assembly, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Common.ObjectFactory.CreateInstance(Of T)(System.Reflection.Assembly, System.String)
  name.vb: CreateInstance(Of T)(Assembly, String)
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String,System.Object[])
  commentId: M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String,System.Object[])
  id: CreateInstance``1(System.Reflection.Assembly,System.String,System.Object[])
  parent: Juhta.Net.Common.ObjectFactory
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(Assembly, String, Object[])
  nameWithType: ObjectFactory.CreateInstance<T>(Assembly, String, Object[])
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance<T>(System.Reflection.Assembly, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CreateInstance
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 52
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nCreates an instance of a specified class.\n"
  example: []
  syntax:
    content: public static T CreateInstance<T>(Assembly assembly, string className, params object[] parameters)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: Specifies an Assembly object.
    - id: className
      type: System.String
      description: >-
        Specifies an assembly class name. The value can begin with a &apos;.&apos; character in which

        case the root namespace for the class will be taken from the file name part of the Assembly object&apos;s

        Location property.
    - id: parameters
      type: System.Object[]
      description: >-
        Specifies an array of parameters that will be passed to the appropriate

        constructor. Can be null causing the default constructor to be called.
    typeParameters:
    - id: T
      description: >-
        Specifies a type for the return value. An instance to create must be castable to this

        type.
    return:
      type: '{T}'
      description: Returns the created instance casted to the requested type.
    content.vb: Public Shared Function CreateInstance(Of T)(assembly As Assembly, className As String, ParamArray parameters As Object()) As T
  overload: Juhta.Net.Common.ObjectFactory.CreateInstance*
  nameWithType.vb: ObjectFactory.CreateInstance(Of T)(Assembly, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Common.ObjectFactory.CreateInstance(Of T)(System.Reflection.Assembly, System.String, System.Object())
  name.vb: CreateInstance(Of T)(Assembly, String, Object())
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri)
  commentId: M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri)
  id: CreateInstance``1(Juhta.Net.Common.AssemblyClassUri)
  parent: Juhta.Net.Common.ObjectFactory
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(AssemblyClassUri)
  nameWithType: ObjectFactory.CreateInstance<T>(AssemblyClassUri)
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance<T>(Juhta.Net.Common.AssemblyClassUri)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CreateInstance
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 74
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nCreates an instance of a specified class by using the default constructor.\n"
  example: []
  syntax:
    content: public static T CreateInstance<T>(AssemblyClassUri assemblyClassUri)
    parameters:
    - id: assemblyClassUri
      type: Juhta.Net.Common.AssemblyClassUri
      description: Specifies an AssemblyClassUri object.
    typeParameters:
    - id: T
      description: >-
        Specifies a type for the return value. An instance to create must be castable to this

        type.
    return:
      type: '{T}'
      description: Returns the created instance casted to the requested type.
    content.vb: Public Shared Function CreateInstance(Of T)(assemblyClassUri As AssemblyClassUri) As T
  overload: Juhta.Net.Common.ObjectFactory.CreateInstance*
  nameWithType.vb: ObjectFactory.CreateInstance(Of T)(AssemblyClassUri)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Common.ObjectFactory.CreateInstance(Of T)(Juhta.Net.Common.AssemblyClassUri)
  name.vb: CreateInstance(Of T)(AssemblyClassUri)
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri,System.Object[])
  commentId: M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.AssemblyClassUri,System.Object[])
  id: CreateInstance``1(Juhta.Net.Common.AssemblyClassUri,System.Object[])
  parent: Juhta.Net.Common.ObjectFactory
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(AssemblyClassUri, Object[])
  nameWithType: ObjectFactory.CreateInstance<T>(AssemblyClassUri, Object[])
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance<T>(Juhta.Net.Common.AssemblyClassUri, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CreateInstance
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 90
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nCreates an instance of a specified class.\n"
  remarks: >-
    An exception will be thrown if the assembly referenced by <code data-dev-comment-type="paramref" class="paramref">assemblyClassUri</code> has

    not been downloaded to the local machine.
  example: []
  syntax:
    content: public static T CreateInstance<T>(AssemblyClassUri assemblyClassUri, params object[] parameters)
    parameters:
    - id: assemblyClassUri
      type: Juhta.Net.Common.AssemblyClassUri
      description: Specifies an AssemblyClassUri object.
    - id: parameters
      type: System.Object[]
      description: >-
        Specifies an array of parameters that will be passed to the appropriate

        constructor. Can be null causing the default constructor to be called.
    typeParameters:
    - id: T
      description: >-
        Specifies a type for the return value. An instance to create must be castable to this

        type.
    return:
      type: '{T}'
      description: Returns the created instance casted to the requested type.
    content.vb: Public Shared Function CreateInstance(Of T)(assemblyClassUri As AssemblyClassUri, ParamArray parameters As Object()) As T
  overload: Juhta.Net.Common.ObjectFactory.CreateInstance*
  nameWithType.vb: ObjectFactory.CreateInstance(Of T)(AssemblyClassUri, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Common.ObjectFactory.CreateInstance(Of T)(Juhta.Net.Common.AssemblyClassUri, System.Object())
  name.vb: CreateInstance(Of T)(AssemblyClassUri, Object())
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String)
  commentId: M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String)
  id: CreateInstance``1(System.String,System.String)
  parent: Juhta.Net.Common.ObjectFactory
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(String, String)
  nameWithType: ObjectFactory.CreateInstance<T>(String, String)
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance<T>(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CreateInstance
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 107
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nCreates an instance of a specified class by using the default constructor.\n"
  example: []
  syntax:
    content: public static T CreateInstance<T>(string assemblyFile, string className)
    parameters:
    - id: assemblyFile
      type: System.String
      description: Specifies an assembly file.
    - id: className
      type: System.String
      description: >-
        Specifies an assembly class. The value can begin with a &apos;.&apos; character in which case

        the root namespace for the class will be taken from the file name of the assembly.
    typeParameters:
    - id: T
      description: >-
        Specifies a type for the return value. An instance to create must be castable to this

        type.
    return:
      type: '{T}'
      description: Returns the created instance casted to the requested type.
    content.vb: Public Shared Function CreateInstance(Of T)(assemblyFile As String, className As String) As T
  overload: Juhta.Net.Common.ObjectFactory.CreateInstance*
  nameWithType.vb: ObjectFactory.CreateInstance(Of T)(String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Common.ObjectFactory.CreateInstance(Of T)(System.String, System.String)
  name.vb: CreateInstance(Of T)(String, String)
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String,System.Object[])
  commentId: M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String,System.Object[])
  id: CreateInstance``1(System.String,System.String,System.Object[])
  parent: Juhta.Net.Common.ObjectFactory
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(String, String, Object[])
  nameWithType: ObjectFactory.CreateInstance<T>(String, String, Object[])
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance<T>(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CreateInstance
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 123
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nCreates an instance of a specified class.\n"
  example: []
  syntax:
    content: public static T CreateInstance<T>(string assemblyFile, string className, params object[] parameters)
    parameters:
    - id: assemblyFile
      type: System.String
      description: Specifies an assembly file.
    - id: className
      type: System.String
      description: >-
        Specifies an assembly class. The value can begin with a &apos;.&apos; character in which case

        the root namespace for the class will be taken from the file name of the assembly.
    - id: parameters
      type: System.Object[]
      description: >-
        Specifies an array of parameters that will be passed to the appropriate

        constructor. Can be null causing the default constructor to be called.
    typeParameters:
    - id: T
      description: >-
        Specifies a type for the return value. An instance to create must be castable to this

        type.
    return:
      type: '{T}'
      description: Returns the created instance casted to the requested type.
    content.vb: Public Shared Function CreateInstance(Of T)(assemblyFile As String, className As String, ParamArray parameters As Object()) As T
  overload: Juhta.Net.Common.ObjectFactory.CreateInstance*
  nameWithType.vb: ObjectFactory.CreateInstance(Of T)(String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Common.ObjectFactory.CreateInstance(Of T)(System.String, System.String, System.Object())
  name.vb: CreateInstance(Of T)(String, String, Object())
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Xml.XmlNode)
  commentId: M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Xml.XmlNode)
  id: CreateInstance``1(System.Xml.XmlNode)
  parent: Juhta.Net.Common.ObjectFactory
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(XmlNode)
  nameWithType: ObjectFactory.CreateInstance<T>(XmlNode)
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance<T>(System.Xml.XmlNode)
  type: Method
  source:
    remote:
      path: src/Juhta.Net/Common/ObjectFactory.cs
      branch: Dev
      repo: https://github.com/jlahteen/juhta.net
    id: CreateInstance
    path: ../src/Juhta.Net/Common/ObjectFactory.cs
    startLine: 138
  assemblies:
  - Juhta.Net
  namespace: Juhta.Net.Common
  summary: "\nCreates an instance based on a specified object XML node.\n"
  example: []
  syntax:
    content: public static T CreateInstance<T>(XmlNode objectNode)
    parameters:
    - id: objectNode
      type: System.Xml.XmlNode
      description: Specifies an object XML node.
    typeParameters:
    - id: T
      description: >-
        Specifies a type for the return value. An instance to create must be castable to this

        type.
    return:
      type: '{T}'
      description: Returns the created instance casted to the requested type.
    content.vb: Public Shared Function CreateInstance(Of T)(objectNode As XmlNode) As T
  overload: Juhta.Net.Common.ObjectFactory.CreateInstance*
  nameWithType.vb: ObjectFactory.CreateInstance(Of T)(XmlNode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Juhta.Net.Common.ObjectFactory.CreateInstance(Of T)(System.Xml.XmlNode)
  name.vb: CreateInstance(Of T)(XmlNode)
references:
- uid: Juhta.Net.Common
  commentId: N:Juhta.Net.Common
  isExternal: false
  name: Juhta.Net.Common
  nameWithType: Juhta.Net.Common
  fullName: Juhta.Net.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Juhta.Net.Common.ObjectFactory.CreateInstance*
  commentId: Overload:Juhta.Net.Common.ObjectFactory.CreateInstance
  isExternal: false
  name: CreateInstance
  nameWithType: ObjectFactory.CreateInstance
  fullName: Juhta.Net.Common.ObjectFactory.CreateInstance
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Juhta.Net.Common.AssemblyClassUri
  commentId: T:Juhta.Net.Common.AssemblyClassUri
  parent: Juhta.Net.Common
  isExternal: false
  name: AssemblyClassUri
  nameWithType: AssemblyClassUri
  fullName: Juhta.Net.Common.AssemblyClassUri
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  parent: System.Xml
  isExternal: true
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
